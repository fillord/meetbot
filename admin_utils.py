#!/usr/bin/env python3
"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import Database
from config import Config

class AdminTools:
    def __init__(self):
        self.db = Database(Config.DATABASE_URL)
    
    async def get_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ Meet Bot")
        print("=" * 40)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        import aiosqlite
        async with aiosqlite.connect(Config.DATABASE_URL) as db:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await db.execute("SELECT COUNT(*) FROM users")
            total_users = (await cursor.fetchone())[0]
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞—Ö–æ–¥–∏–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            week_ago = datetime.now() - timedelta(days=7)
            cursor = await db.execute(
                "SELECT COUNT(*) FROM users WHERE last_active > ?", 
                (week_ago,)
            )
            active_users = (await cursor.fetchone())[0]
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∞–Ω–∫–µ—Ç–∞–º–∏
            cursor = await db.execute(
                "SELECT COUNT(*) FROM users WHERE name IS NOT NULL AND age IS NOT NULL"
            )
            profiles_filled = (await cursor.fetchone())[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–∞–π–ø–æ–≤
            cursor = await db.execute("SELECT COUNT(*) FROM swipes")
            total_swipes = (await cursor.fetchone())[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
            cursor = await db.execute("SELECT COUNT(*) FROM matches WHERE is_active = 1")
            total_matches = (await cursor.fetchone())[0]
            
            # –§–æ—Ç–æ –≤ –∞–Ω–∫–µ—Ç–∞—Ö
            cursor = await db.execute("SELECT COUNT(*) FROM user_photos")
            total_photos = (await cursor.fetchone())[0]
            
            print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users}")
            print(f"üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç: {profiles_filled}")
            print(f"üëÜ –í—Å–µ–≥–æ —Å–≤–∞–π–ø–æ–≤: {total_swipes}")
            print(f"üíñ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {total_matches}")
            print(f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {total_photos}")
            
            if total_swipes > 0:
                match_rate = (total_matches * 2 / total_swipes) * 100  # *2 —Ç.–∫. –Ω–∞ –º–∞—Ç—á –Ω—É–∂–Ω–æ 2 —Å–≤–∞–π–ø–∞
                print(f"üíØ –ü—Ä–æ—Ü–µ–Ω—Ç –º–∞—Ç—á–µ–π: {match_rate:.2f}%")
    
    async def list_recent_users(self, limit=10):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print(f"\nüë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ {limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        print("-" * 60)
        
        import aiosqlite
        async with aiosqlite.connect(Config.DATABASE_URL) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute(
                """SELECT user_id, username, first_name, name, age, city, created_at 
                   FROM users ORDER BY created_at DESC LIMIT ?""",
                (limit,)
            )
            
            users = await cursor.fetchall()
            for user in users:
                username = user['username'] or '–ù–µ—Ç username'
                name = user['name'] or user['first_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'
                age = user['age'] or '?'
                city = user['city'] or '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'
                created = user['created_at']
                
                print(f"ID: {user['user_id']} | @{username} | {name}, {age} | {city} | {created}")
    
    async def cleanup_old_data(self, days=30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
        
        cutoff_date = datetime.now() - timedelta(days=days)
        
        import aiosqlite
        async with aiosqlite.connect(Config.DATABASE_URL) as db:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤–∞–π–ø—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await db.execute(
                """DELETE FROM swipes WHERE created_at < ? 
                   AND from_user_id IN (
                       SELECT user_id FROM users WHERE last_active < ?
                   )""",
                (cutoff_date, cutoff_date)
            )
            deleted_swipes = cursor.rowcount
            
            await db.commit()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–≤–∞–π–ø–æ–≤: {deleted_swipes}")
    
    async def find_user(self, query):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID, username –∏–ª–∏ –∏–º–µ–Ω–∏"""
        print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}")
        print("-" * 40)
        
        import aiosqlite
        async with aiosqlite.connect(Config.DATABASE_URL) as db:
            db.row_factory = aiosqlite.Row
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID
            if query.isdigit():
                cursor = await db.execute(
                    "SELECT * FROM users WHERE user_id = ?",
                    (int(query),)
                )
            else:
                # –ü–æ–∏—Å–∫ –ø–æ username –∏–ª–∏ –∏–º–µ–Ω–∏
                cursor = await db.execute(
                    """SELECT * FROM users 
                       WHERE username LIKE ? OR name LIKE ? OR first_name LIKE ?""",
                    (f"%{query}%", f"%{query}%", f"%{query}%")
                )
            
            users = await cursor.fetchall()
            
            if not users:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            for user in users:
                print(f"ID: {user['user_id']}")
                print(f"Username: @{user['username'] or '–Ω–µ—Ç'}")
                print(f"–ò–º—è: {user['first_name']} ({user['name']})")
                print(f"–í–æ–∑—Ä–∞—Å—Ç: {user['age']} –ª–µ—Ç")
                print(f"–ì–æ—Ä–æ–¥: {user['city']}")
                print(f"–ü–æ–ª: {user['gender']}")
                print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {user['bio'][:100] if user['bio'] else '–ù–µ—Ç'}...")
                print(f"–ê–∫—Ç–∏–≤–µ–Ω: {user['is_active']}")
                print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {user['last_active']}")
                print("-" * 40)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–¥–º–∏–Ω-—É—Ç–∏–ª–∏—Ç"""
    admin = AdminTools()
    
    if len(sys.argv) < 2:
        print("üîß –ê–¥–º–∏–Ω-—É—Ç–∏–ª–∏—Ç—ã Meet Bot")
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python admin_utils.py stats          - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("  python admin_utils.py users [N]      - –ü–æ–∫–∞–∑–∞—Ç—å N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("  python admin_utils.py cleanup [days] - –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π")
        print("  python admin_utils.py find <query>   - –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    command = sys.argv[1]
    
    if command == "stats":
        await admin.get_stats()
    
    elif command == "users":
        limit = int(sys.argv[2]) if len(sys.argv) > 2 else 10
        await admin.get_stats()
        await admin.list_recent_users(limit)
    
    elif command == "cleanup":
        days = int(sys.argv[2]) if len(sys.argv) > 2 else 30
        await admin.cleanup_old_data(days)
    
    elif command == "find":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return
        query = sys.argv[2]
        await admin.find_user(query)
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

if __name__ == "__main__":
    asyncio.run(main())
