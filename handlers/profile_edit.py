from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, Location
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.database import Database
from utils.keyboards import (
    get_skip_or_keep_keyboard, get_main_menu_keyboard,
    get_gender_keyboard_with_keep, get_looking_for_keyboard_with_keep,
    get_location_keyboard, get_back_to_profile_keyboard, get_edit_profile_keyboard,
    get_profile_keyboard, get_back_to_menu_keyboard
)
from utils.validators import validate_name, validate_age, validate_bio
from utils.ai_helper import ai_helper
from utils.profile_utils import is_profile_complete
import logging
import aiohttp
import json

logger = logging.getLogger(__name__)
router = Router()

class ProfileEditStates(StatesGroup):
    editing_name = State()
    editing_age = State()
    editing_city = State()
    editing_bio = State()
    editing_gender = State()
    editing_looking_for = State()

@router.callback_query(F.data == "edit_profile")
async def show_edit_profile_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    await callback.answer()
    
    try:
        await callback.message.edit_caption(
            caption="‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
            parse_mode="HTML",
            reply_markup=get_edit_profile_keyboard()
        )
    except Exception as e:
        logger.error(f"Error editing profile menu caption: {e}")
        try:
            await callback.message.edit_text(
                "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
                parse_mode="HTML",
                reply_markup=get_edit_profile_keyboard()
            )
        except Exception as e2:
            logger.error(f"Error editing profile menu text: {e2}")
            await callback.message.answer(
                "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
                parse_mode="HTML",
                reply_markup=get_edit_profile_keyboard()
            )

@router.callback_query(F.data == "set_location")
async def start_location_update(callback: CallbackQuery, state: FSMContext, db: Database):
    """–ù–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    await callback.answer()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    current_city = user.city if user and user.city and str(user.city).strip() else "–ù–µ —É–∫–∞–∑–∞–Ω"
    has_location = user and user.latitude and user.longitude
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await state.set_state(ProfileEditStates.editing_city)
    
    text = f"üìç <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
    text += f"–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: <i>{current_city}</i>\n"
    if has_location:
        text += f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n"
    else:
        text += f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã\n\n"
    
    text += "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π.\n"
    text += "–ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ–π –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.\n\n"
    text += "üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:"
    
    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await callback.message.answer(
            "üìç –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:",
            reply_markup=get_location_keyboard()
        )
    except Exception as e:
        logger.error(f"Error editing message for location update: {e}")
        await callback.message.answer(
            text,
            parse_mode="HTML"
        )
        await callback.message.answer(
            "üìç –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:",
            reply_markup=get_location_keyboard()
        )

@router.callback_query(F.data == "recreate_profile")
async def start_recreate_profile(callback: CallbackQuery, state: FSMContext, db: Database):
    """–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"""
    await callback.answer()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    current_name = user.name if user and user.name and str(user.name).strip() else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    has_name = bool(user and user.name and str(user.name).strip())
    
    try:
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∏–º—è: <i>{current_name}</i>\n\n"
            f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ –æ—Å—Ç–∞–≤—å —Ç–µ–∫—É—â–µ–µ:",
            parse_mode="HTML",
            reply_markup=get_skip_or_keep_keyboard("name", has_name)
        )
        await state.set_state(ProfileEditStates.editing_name)
    except Exception as e:
        logger.error(f"Error starting profile recreation: {e}")
        await callback.message.answer(
            f"‚úèÔ∏è <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∏–º—è: <i>{current_name}</i>\n\n"
            f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ –æ—Å—Ç–∞–≤—å —Ç–µ–∫—É—â–µ–µ:",
            parse_mode="HTML",
            reply_markup=get_skip_or_keep_keyboard("name", has_name)
        )
        await state.set_state(ProfileEditStates.editing_name)

@router.message(ProfileEditStates.editing_name)
async def process_name_edit(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    
    if not validate_name(name):
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_skip_or_keep_keyboard("name", False)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await state.update_data(name=name)
    user_id = message.from_user.id
    await db.create_or_update_user(user_id, name=name)
    logger.info(f"Name updated for user {user_id}: {name}")
    
    await ask_for_age(message, state, db)

@router.callback_query(F.data.startswith("skip_") | F.data.startswith("keep_"))
async def handle_skip_or_keep(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    await callback.answer()
    
    action, field = callback.data.split("_", 1)
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    # –ü—Ä–æ–ø—É—Å–∫ —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—Ä–µ—â–µ–Ω - –≤—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
    if action == "skip":
        await callback.answer("‚ùå –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", show_alert=True)
        return
    elif action == "keep":
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        current_data = await state.get_data()
        if field == "name":
            if user.name and str(user.name).strip():
                # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å" —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                await db.create_or_update_user(user_id, name=user.name)
            else:
                # –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ, –ø—Ä–æ—Å–∏–º –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
                await callback.answer("‚ùå –ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.", show_alert=True)
                return
        elif field == "age":
            if user.age:
                # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å" —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                await db.create_or_update_user(user_id, age=user.age)
            else:
                # –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ—Å–∏–º –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
                await callback.answer("‚ùå –í–æ–∑—Ä–∞—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç.", show_alert=True)
                return
        elif field == "city":
            # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –≤—Å–µ—Ö
            await callback.answer("‚ö†Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", show_alert=True)
            return
        elif field == "bio":
            # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            logger.info(f"Checking bio for user {user_id}: current bio = '{user.bio}', stripped = '{str(user.bio).strip() if user.bio else None}'")
            if user.bio and str(user.bio).strip():
                # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å" —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                await db.create_or_update_user(user_id, bio=user.bio)
                logger.info(f"Bio kept and updated for user {user_id}: '{user.bio}'")
            else:
                # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ—Å–∏–º –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
                logger.warning(f"Bio is empty for user {user_id}, requesting new bio")
                await callback.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ.", show_alert=True)
                return
        elif field == "gender":
            if user.gender and str(user.gender).strip():
                # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å" —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                await db.create_or_update_user(user_id, gender=user.gender)
            else:
                # –ï—Å–ª–∏ –ø–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ—Å–∏–º –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
                await callback.answer("‚ùå –ü–æ–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª.", show_alert=True)
                return
        elif field == "looking_for":
            if user.looking_for and str(user.looking_for).strip():
                # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å" —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                await db.create_or_update_user(user_id, looking_for=user.looking_for)
            else:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –ø—Ä–æ—Å–∏–º –∏—Ö –∑–∞–ø–æ–ª–Ω–∏—Ç—å
                await callback.answer("‚ùå –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –∏—â–µ—Ç–µ.", show_alert=True)
                return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if field == "name":
        await ask_for_age(callback.message, state, db, user_id)
    elif field == "age":
        await ask_for_city(callback.message, state, db, user_id)
    elif field == "city":
        await ask_for_bio(callback.message, state, db, user_id)
    elif field == "bio":
        await ask_for_gender(callback.message, state, db, user_id)
    elif field == "gender":
        await ask_for_looking_for(callback.message, state, db, user_id)
    elif field == "looking_for":
        await finalize_profile_edit(callback.message, state, db)

@router.callback_query(F.data == "cancel_edit")
async def handle_cancel_edit(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()
    await state.clear()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    has_complete_profile = is_profile_complete(user)
    
    try:
        await callback.message.edit_text(
            "üîô <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard(has_profile=has_complete_profile)
        )
    except Exception:
        await callback.message.answer(
            "üîô <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard(has_profile=has_complete_profile)
        )

async def ask_for_age(message, state: FSMContext, db: Database, user_id: int = None):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç"""
    if user_id is None:
        user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    user = await db.get_user(user_id)
    
    current_age = str(user.age) if user and user.age else "–ù–µ —É–∫–∞–∑–∞–Ω"
    has_age = bool(user and user.age)
    
    # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ProfileEditStates.editing_age)
    
    try:
        await message.edit_text(
            f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç: <i>{current_age}</i>\n\n"
            f"–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100 –ª–µ—Ç) –∏–ª–∏ –æ—Å—Ç–∞–≤—å —Ç–µ–∫—É—â–∏–π:",
            parse_mode="HTML",
            reply_markup=get_skip_or_keep_keyboard("age", has_age)
        )
    except Exception:
        await message.answer(
            f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç: <i>{current_age}</i>\n\n"
            f"–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100 –ª–µ—Ç) –∏–ª–∏ –æ—Å—Ç–∞–≤—å —Ç–µ–∫—É—â–∏–π:",
            parse_mode="HTML",
            reply_markup=get_skip_or_keep_keyboard("age", has_age)
        )

@router.message(ProfileEditStates.editing_age)
async def process_age_edit(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(message.text.strip())
        is_valid, validated_age, error_msg = validate_age(age)
        if not is_valid:
            await message.answer(
                f"‚ùå {error_msg}\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_skip_or_keep_keyboard("age", False)
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await state.update_data(age=validated_age)
        user_id = message.from_user.id
        await db.create_or_update_user(user_id, age=validated_age)
        logger.info(f"Age updated for user {user_id}: {validated_age}")
        
        await ask_for_city(message, state, db)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_skip_or_keep_keyboard("age", False)
        )

async def ask_for_city(message, state: FSMContext, db: Database, user_id: int = None):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    if user_id is None:
        user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    user = await db.get_user(user_id)
    
    current_city = user.city if user and user.city and str(user.city).strip() else "–ù–µ —É–∫–∞–∑–∞–Ω"
    has_location = user and user.latitude and user.longitude
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await state.set_state(ProfileEditStates.editing_city)
    
    text = f"üìç <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
    text += f"–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: <i>{current_city}</i>\n"
    if has_location:
        text += f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n"
    else:
        text += f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã\n\n"
    
    text += "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π.\n"
    text += "–ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ–π –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.\n\n"
    text += "‚ö†Ô∏è <b>–≠—Ç–æ—Ç —à–∞–≥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω</b> - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    
    try:
        await message.edit_text(
            text,
            parse_mode="HTML"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await message.answer(
            "üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:",
            reply_markup=get_location_keyboard()
        )
    except Exception:
        await message.answer(
            text,
            parse_mode="HTML"
        )
        await message.answer(
            "üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:",
            reply_markup=get_location_keyboard()
        )

async def get_city_from_coordinates(lat: float, lon: float) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —á–µ—Ä–µ–∑ OpenStreetMap Nominatim API"""
    try:
        url = f"https://nominatim.openstreetmap.org/reverse?format=json&lat={lat}&lon={lon}&zoom=10&addressdetails=1"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers={'User-Agent': 'Meet Bot'}) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    address = data.get('address', {})
                    city = (address.get('city') or 
                           address.get('town') or 
                           address.get('village') or 
                           address.get('municipality') or
                           address.get('county') or
                           '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥')
                    
                    return city
                else:
                    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"

@router.message(ProfileEditStates.editing_city)
async def process_city_edit(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞"""
    if message.location:
        # –ü–æ–ª—É—á–∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        lat = message.location.latitude
        lon = message.location.longitude
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        city = await get_city_from_coordinates(lat, lon)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await state.update_data(
            city=city,
            latitude=lat,
            longitude=lon
        )
        
        user_id = message.from_user.id
        await db.create_or_update_user(
            user_id, 
            city=city,
            latitude=lat,
            longitude=lon
        )
        logger.info(f"Location updated for user {user_id}: city={city}, lat={lat}, lon={lon}")
        
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
        from aiogram.types import ReplyKeyboardRemove
        await message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —Ç–≤–æ–π –≥–æ—Ä–æ–¥: <b>{city}</b>\n"
            f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π —Ä—è–¥–æ–º",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–∏–æ
        await ask_for_bio(message, state, db)
        
    elif message.text:
        # –ü–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–ø–æ—Å–æ–±)
        await message.answer(
            "üîÑ –¢–µ–ø–µ—Ä—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=get_location_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=get_location_keyboard()
        )

async def ask_for_bio(message, state: FSMContext, db: Database, user_id: int = None):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
    if user_id is None:
        user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    user = await db.get_user(user_id)
    
    current_bio = user.bio if user and user.bio and str(user.bio).strip() else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    bio_preview = current_bio[:100] + "..." if len(current_bio) > 100 else current_bio
    has_bio = user and user.bio and str(user.bio).strip()
    
    # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ProfileEditStates.editing_bio)
    
    try:
        await message.edit_text(
            f"üìù <b>–û —Å–µ–±–µ</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <i>{bio_preview}</i>\n\n"
            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ (–æ—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤). –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:",
            parse_mode="HTML",
            reply_markup=get_skip_or_keep_keyboard("bio", has_bio)
        )
    except Exception:
        await message.answer(
            f"üìù <b>–û —Å–µ–±–µ</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <i>{bio_preview}</i>\n\n"
            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ (–æ—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤). –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:",
            parse_mode="HTML",
            reply_markup=get_skip_or_keep_keyboard("bio", has_bio)
        )

@router.message(ProfileEditStates.editing_bio)
async def process_bio_edit(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    bio = message.text.strip()
    
    is_valid, validated_bio, error = validate_bio(bio)
    if not is_valid:
        await message.answer(
            f"‚ùå {error}\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_skip_or_keep_keyboard("bio", False)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    content_check = await ai_helper.check_content_safety(validated_bio)
    if not content_check:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É:",
            reply_markup=get_skip_or_keep_keyboard("bio", False)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    await db.create_or_update_user(user_id, bio=validated_bio)
    logger.info(f"Bio updated for user {user_id}: {validated_bio}")
    
    await ask_for_gender(message, state, db)

async def ask_for_gender(message, state: FSMContext, db: Database, user_id: int = None):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª"""
    if user_id is None:
        user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    user = await db.get_user(user_id)
    
    current_gender = "–ù–µ —É–∫–∞–∑–∞–Ω"
    has_gender = False
    if user and user.gender:
        gender_map = {"male": "–ú—É–∂—Å–∫–æ–π", "female": "–ñ–µ–Ω—Å–∫–∏–π"}
        current_gender = gender_map.get(user.gender, user.gender)
        has_gender = True
    
    # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ProfileEditStates.editing_gender)
    
    try:
        await message.edit_text(
            f"üë´ <b>–ü–æ–ª</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –ø–æ–ª: <i>{current_gender}</i>\n\n"
            f"–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª –∏–ª–∏ –æ—Å—Ç–∞–≤—å —Ç–µ–∫—É—â–∏–π:",
            parse_mode="HTML",
            reply_markup=get_gender_keyboard_with_keep(has_gender)
        )
    except Exception:
        await message.answer(
            f"üë´ <b>–ü–æ–ª</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –ø–æ–ª: <i>{current_gender}</i>\n\n"
            f"–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª –∏–ª–∏ –æ—Å—Ç–∞–≤—å —Ç–µ–∫—É—â–∏–π:",
            parse_mode="HTML",
            reply_markup=get_gender_keyboard_with_keep(has_gender)
        )

@router.callback_query(F.data.startswith("gender_"), ProfileEditStates.editing_gender)
async def process_gender_edit(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    await callback.answer()
    
    user_id = callback.from_user.id
    gender = callback.data.split("_")[1]
    # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.create_or_update_user(user_id, gender=gender)
    logger.info(f"Gender updated for user {user_id}: {gender}")
    await ask_for_looking_for(callback.message, state, db, user_id)

async def ask_for_looking_for(message, state: FSMContext, db: Database, user_id: int = None):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"""
    if user_id is None:
        user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    user = await db.get_user(user_id)
    
    current_looking_for = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    has_looking_for = False
    if user and user.looking_for:
        looking_for_map = {"male": "–ü–∞—Ä–Ω–µ–π", "female": "–î–µ–≤—É—à–µ–∫", "both": "–í—Å–µ—Ö"}
        current_looking_for = looking_for_map.get(user.looking_for, user.looking_for)
        has_looking_for = True
    
    # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ProfileEditStates.editing_looking_for)
    
    try:
        await message.edit_text(
            f"üíï <b>–ö–æ–≥–æ –∏—â–µ—à—å?</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: <i>{current_looking_for}</i>\n\n"
            f"–í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω, –∏–ª–∏ –æ—Å—Ç–∞–≤—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_looking_for_keyboard_with_keep(has_looking_for)
        )
    except Exception:
        await message.answer(
            f"üíï <b>–ö–æ–≥–æ –∏—â–µ—à—å?</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: <i>{current_looking_for}</i>\n\n"
            f"–í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω, –∏–ª–∏ –æ—Å—Ç–∞–≤—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_looking_for_keyboard_with_keep(has_looking_for)
        )

@router.callback_query(F.data.startswith("looking_"), ProfileEditStates.editing_looking_for)
async def process_looking_for_edit(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    await callback.answer()
    
    user_id = callback.from_user.id
    looking_for = callback.data.split("_")[1]
    # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.create_or_update_user(user_id, looking_for=looking_for)
    logger.info(f"Looking for updated for user {user_id}: {looking_for}")
    await finalize_profile_edit(callback.message, state, db)

async def finalize_profile_edit(message, state: FSMContext, db: Database):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    
    logger.info(f"Finalizing profile edit for user {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    state_data = await state.get_data()
    logger.info(f"State data before finalizing: {state_data}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    update_data = {}
    if 'name' in state_data:
        update_data['name'] = state_data['name']
    if 'age' in state_data:
        update_data['age'] = state_data['age']
    if 'city' in state_data:
        update_data['city'] = state_data['city']
    if 'latitude' in state_data:
        update_data['latitude'] = state_data['latitude']
    if 'longitude' in state_data:
        update_data['longitude'] = state_data['longitude']
    if 'bio' in state_data:
        update_data['bio'] = state_data['bio']
    # gender –∏ looking_for —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∞
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if update_data:
        await db.create_or_update_user(user_id, **update_data)
        logger.info(f"Updated user {user_id} with data: {update_data}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    updated_user = await db.get_user(user_id)
    logger.info(f"Final user data: name='{updated_user.name}', age={updated_user.age}, city='{updated_user.city}', bio='{updated_user.bio}', gender='{updated_user.gender}', looking_for='{updated_user.looking_for}'")
    
    has_complete_profile = is_profile_complete(updated_user)
    logger.info(f"Profile complete check result: {has_complete_profile}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    success_text = "‚úÖ <b>–ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É."
    
    try:
        await message.edit_text(
            success_text,
            parse_mode="HTML",
            reply_markup=get_back_to_profile_keyboard()
        )
    except Exception:
        await message.answer(
            success_text,
            parse_mode="HTML",
            reply_markup=get_back_to_profile_keyboard()
        )

@router.callback_query(F.data == "improve_with_ai")
async def improve_profile_with_ai(callback: CallbackQuery, db: Database):
    """–£–ª—É—á—à–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é AI"""
    await callback.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É...")
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user or not user.bio:
        try:
            await callback.message.edit_caption(
                caption="‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã",
                parse_mode="HTML",
                reply_markup=get_profile_keyboard(is_own=True)
            )
        except Exception:
            await callback.message.edit_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã",
                parse_mode="HTML",
                reply_markup=get_profile_keyboard(is_own=True)
            )
        return
    
    # –£–ª—É—á—à–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
    user_data = {
        'name': user.name,
        'age': user.age,
        'city': user.city,
        'gender': user.gender
    }
    
    improved_bio = await ai_helper.improve_bio_with_ai(user.bio, user_data)
    
    if improved_bio:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        await db.create_or_update_user(user_id, bio=improved_bio)
        
        try:
            await callback.message.edit_caption(
                caption="‚ú® <b>–û–ø–∏—Å–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é AI!</b>\n\n–í–æ—Ç —Ç–≤–æ—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞:",
                parse_mode="HTML",
                reply_markup=get_back_to_menu_keyboard()
            )
        except Exception:
            await callback.message.edit_text(
                "‚ú® <b>–û–ø–∏—Å–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é AI!</b>\n\n–í–æ—Ç —Ç–≤–æ—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞:",
                parse_mode="HTML",
                reply_markup=get_back_to_menu_keyboard()
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É
        from handlers.profile import show_user_profile
        await show_user_profile(callback.message, db, user_id, is_own=True)
    else:
        try:
            await callback.message.edit_caption(
                caption="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. AI-—Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                parse_mode="HTML",
                reply_markup=get_profile_keyboard(is_own=True)
            )
        except Exception:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. AI-—Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                parse_mode="HTML",
                reply_markup=get_profile_keyboard(is_own=True)
            )

def register_profile_edit_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    dp.include_router(router)
