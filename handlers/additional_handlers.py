from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.database import Database
from utils.keyboards import (
    get_profile_keyboard, get_edit_profile_keyboard, 
    get_back_to_menu_keyboard, get_photos_keyboard,
    get_photo_management_keyboard, get_age_range_keyboard,
    get_search_radius_keyboard, get_delete_profile_confirm_keyboard,
    get_back_to_profile_keyboard
)
from handlers.profile import ProfileStates
import logging

logger = logging.getLogger(__name__)
router = Router()

class PhotoStates(StatesGroup):
    adding_photo = State()

@router.callback_query(F.data == "edit_name")
async def edit_name_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏"""
    await callback.answer()
    
    try:
        await callback.message.edit_text(
            "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏</b>\n\n"
            "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.set_state(ProfileStates.waiting_for_name)
    except Exception as e:
        logger.error(f"Error editing name: {e}")
        await callback.message.answer(
            "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏</b>\n\n"
            "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.set_state(ProfileStates.waiting_for_name)

@router.callback_query(F.data == "edit_age")
async def edit_age_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    await callback.answer()
    
    try:
        await callback.message.edit_text(
            "üéÇ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞</b>\n\n"
            "–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100 –ª–µ—Ç):",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.set_state(ProfileStates.waiting_for_age)
    except Exception as e:
        logger.error(f"Error editing age: {e}")
        await callback.message.answer(
            "üéÇ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞</b>\n\n"
            "–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100 –ª–µ—Ç):",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.set_state(ProfileStates.waiting_for_age)

@router.callback_query(F.data == "edit_bio")
async def edit_bio_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    await callback.answer()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    current_bio = user.bio if user and user.bio else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    try:
        await callback.message.edit_text(
            f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <i>{current_bio}</i>\n\n"
            f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.set_state(ProfileStates.waiting_for_bio)
    except Exception as e:
        logger.error(f"Error editing bio: {e}")
        await callback.message.answer(
            f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <i>{current_bio}</i>\n\n"
            f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.set_state(ProfileStates.waiting_for_bio)

@router.callback_query(F.data == "edit_location")
async def edit_location_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    await callback.answer()
    
    try:
        await callback.message.edit_text(
            "üåÜ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b>\n\n"
            "–£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.set_state(ProfileStates.waiting_for_location)
    except Exception as e:
        logger.error(f"Error editing location: {e}")
        await callback.message.answer(
            "üåÜ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b>\n\n"
            "–£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.set_state(ProfileStates.waiting_for_location)

@router.callback_query(F.data == "manage_photos")
async def manage_photos_handler(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    await callback.answer()
    
    user_id = callback.from_user.id
    photos = await db.get_user_photos(user_id)
    
    from utils.keyboards import get_photo_management_keyboard
    
    try:
        await callback.message.edit_text(
            f"üì∏ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏</b>\n\n"
            f"–£ —Ç–µ–±—è {len(photos)} —Ñ–æ—Ç–æ –∏–∑ 5 –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n\n"
            f"–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            parse_mode="HTML",
            reply_markup=get_photo_management_keyboard()
        )
    except Exception as e:
        logger.error(f"Error managing photos: {e}")
        await callback.message.answer(
            f"üì∏ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏</b>\n\n"
            f"–£ —Ç–µ–±—è {len(photos)} —Ñ–æ—Ç–æ –∏–∑ 5 –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n\n"
            f"–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            parse_mode="HTML",
            reply_markup=get_photo_management_keyboard()
        )

@router.callback_query(F.data == "add_photo")
async def add_photo_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    await callback.answer()
    
    user_id = callback.from_user.id
    photos = await db.get_user_photos(user_id)
    
    if len(photos) >= 5:
        try:
            await callback.message.edit_text(
                "‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç</b>\n\n"
                "–£ —Ç–µ–±—è —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (5).\n"
                "–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏ –æ–¥–Ω–æ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.",
                parse_mode="HTML",
                reply_markup=get_photos_keyboard(len(photos))
            )
        except Exception as e:
            await callback.message.answer(
                "‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç</b>\n\n"
                "–£ —Ç–µ–±—è —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (5).\n"
                "–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏ –æ–¥–Ω–æ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.",
                parse_mode="HTML",
                reply_markup=get_photos_keyboard(len(photos))
            )
        return
    
    try:
        await callback.message.edit_text(
            "üì∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç—É:",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.set_state(PhotoStates.adding_photo)
    except Exception as e:
        logger.error(f"Error adding photo: {e}")
        await callback.message.answer(
            "üì∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç—É:",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.set_state(PhotoStates.adding_photo)

@router.message(PhotoStates.adding_photo, F.photo)
async def process_add_photo(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo = message.photo[-1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ —Ä–∞–∑
    existing_photos = await db.get_user_photos(user_id)
    if len(existing_photos) >= 5:
        await message.answer(
            "‚ùå –£ —Ç–µ–±—è —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (5)",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.clear()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ (–ù–ï –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ)
    await db.add_user_photo(
        user_id=user_id,
        file_id=photo.file_id,
        file_unique_id=photo.file_unique_id,
        is_main=False
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –ø—Ä–æ—Ñ–∏–ª—é
    await message.answer(
        "‚úÖ <b>–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
        "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.",
        parse_mode="HTML",
        reply_markup=get_back_to_profile_keyboard()
    )

@router.message(PhotoStates.adding_photo)
async def process_invalid_add_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
        reply_markup=get_back_to_menu_keyboard()
    )

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await callback.answer()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üéØ <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:</b> {user.min_age}-{user.max_age} –ª–µ—Ç\n"
        f"ÔøΩ <b>–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:</b> {user.search_radius} –∫–º\n"
        f"üëÅÔ∏è <b>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç:</b> {'–î–∞' if user.show_age else '–ù–µ—Ç'}\n"
        f"üìç <b>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–æ—Ä–æ–¥:</b> {'–î–∞' if user.show_location else '–ù–µ—Ç'}\n"
        f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}"
    )
    
    from utils.keyboards import get_settings_keyboard
    
    try:
        await callback.message.edit_text(
            settings_text,
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
    except Exception as e:
        logger.error(f"Error showing settings: {e}")
        await callback.message.answer(
            settings_text,
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
@router.callback_query(F.data == "age_range_settings")
async def show_age_range_settings(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    await callback.answer()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = (
        f"üéØ <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b>\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {user.min_age}-{user.max_age} –ª–µ—Ç\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ ‚ûñ –∏ ‚ûï –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞:"
    )
    
    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_age_range_keyboard(user.min_age, user.max_age)
        )
    except Exception as e:
        logger.error(f"Error showing age range settings: {e}")
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_age_range_keyboard(user.min_age, user.max_age)
        )

@router.callback_query(F.data.startswith("age_min_"))
async def handle_age_min_change(callback: CallbackQuery, db: Database):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    await callback.answer()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    # –ü–∞—Ä—Å–∏–º callback_data: age_min_down_18 –∏–ª–∏ age_min_up_18
    parts = callback.data.split("_")
    action = parts[2]  # down, up, info
    
    if action == "down" and user.min_age > 18:
        new_min_age = user.min_age - 1
        if new_min_age < user.max_age:
            await db.create_or_update_user(user_id, min_age=new_min_age)
    elif action == "up" and user.min_age < 99:
        new_min_age = user.min_age + 1
        if new_min_age < user.max_age:
            await db.create_or_update_user(user_id, min_age=new_min_age)
    elif action == "info":
        await callback.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {user.min_age} –ª–µ—Ç")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    updated_user = await db.get_user(user_id)
    text = (
        f"üéØ <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b>\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {updated_user.min_age}-{updated_user.max_age} –ª–µ—Ç\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ ‚ûñ –∏ ‚ûï –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞:"
    )
    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_age_range_keyboard(updated_user.min_age, updated_user.max_age)
        )
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

@router.callback_query(F.data.startswith("age_max_"))
async def handle_age_max_change(callback: CallbackQuery, db: Database):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    await callback.answer()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    # –ü–∞—Ä—Å–∏–º callback_data: age_max_down_35 –∏–ª–∏ age_max_up_35
    parts = callback.data.split("_")
    action = parts[2]  # down, up, info
    
    if action == "down" and user.max_age > 18:
        new_max_age = user.max_age - 1
        if new_max_age > user.min_age:
            await db.create_or_update_user(user_id, max_age=new_max_age)
    elif action == "up" and user.max_age < 99:
        new_max_age = user.max_age + 1
        await db.create_or_update_user(user_id, max_age=new_max_age)
    elif action == "info":
        await callback.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {user.max_age} –ª–µ—Ç")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    updated_user = await db.get_user(user_id)
    text = (
        f"üéØ <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b>\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {updated_user.min_age}-{updated_user.max_age} –ª–µ—Ç\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ ‚ûñ –∏ ‚ûï –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞:"
    )
    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_age_range_keyboard(updated_user.min_age, updated_user.max_age)
        )
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

@router.callback_query(F.data.startswith("age_range_"))
async def handle_age_range_preset(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü–∞—Ä—Å–∏–º callback_data: age_range_18_25, age_range_26_35, etc.
    parts = callback.data.split("_")
    if len(parts) >= 4:
        min_age = int(parts[2])
        max_age = int(parts[3])
        await db.create_or_update_user(user_id, min_age=min_age, max_age=max_age)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        text = (
            f"üéØ <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {min_age}-{max_age} –ª–µ—Ç\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ ‚ûñ –∏ ‚ûï –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞:"
        )
        try:
            await callback.message.edit_text(
                text,
                parse_mode="HTML",
                reply_markup=get_age_range_keyboard(min_age, max_age)
            )
        except Exception:
            pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data == "search_radius_settings")
async def show_search_radius_settings(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞"""
    await callback.answer()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = (
        f"üìè <b>–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–∞–¥–∏—É—Å: {user.search_radius} –∫–º\n\n"
        f"–ò–∑–º–µ–Ω–∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç:"
    )
    
    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_search_radius_keyboard(user.search_radius)
        )
    except Exception as e:
        logger.error(f"Error showing search radius settings: {e}")
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_search_radius_keyboard(user.search_radius)
        )

@router.callback_query(F.data.startswith("radius_"))
async def handle_radius_change(callback: CallbackQuery, db: Database):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞"""
    await callback.answer()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    # –ü–∞—Ä—Å–∏–º callback_data
    parts = callback.data.split("_")
    action = parts[1]
    
    if action == "down" and user.search_radius > 5:
        new_radius = max(5, user.search_radius - 5)
        await db.create_or_update_user(user_id, search_radius=new_radius)
    elif action == "up" and user.search_radius < 500:
        new_radius = min(500, user.search_radius + 5)
        await db.create_or_update_user(user_id, search_radius=new_radius)
    elif action == "info":
        await callback.answer(f"–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: {user.search_radius} –∫–º")
        return
    elif action.isdigit():  # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: radius_5, radius_25, etc.
        new_radius = int(action)
        await db.create_or_update_user(user_id, search_radius=new_radius)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    updated_user = await db.get_user(user_id)
    text = (
        f"üìè <b>–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–∞–¥–∏—É—Å: {updated_user.search_radius} –∫–º\n\n"
        f"–ò–∑–º–µ–Ω–∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç:"
    )
    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_search_radius_keyboard(updated_user.search_radius)
        )
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(F.data == "toggle_show_age")
async def toggle_show_age(callback: CallbackQuery, db: Database):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–∫–∞–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    new_value = not user.show_age
    await db.create_or_update_user(user_id, show_age=new_value)
    
    status = "–≤–∫–ª—é—á–µ–Ω" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω"
    await callback.answer(f"–ü–æ–∫–∞–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞ {status}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await show_settings(callback, db)

@router.callback_query(F.data == "toggle_show_location")
async def toggle_show_location(callback: CallbackQuery, db: Database):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–∫–∞–∑ –ª–æ–∫–∞—Ü–∏–∏"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    new_value = not user.show_location
    await db.create_or_update_user(user_id, show_location=new_value)
    
    status = "–≤–∫–ª—é—á–µ–Ω" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω"
    await callback.answer(f"–ü–æ–∫–∞–∑ –≥–æ—Ä–æ–¥–∞ {status}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await show_settings(callback, db)

@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery, db: Database):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    new_value = not user.notifications_enabled
    await db.create_or_update_user(user_id, notifications_enabled=new_value)
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await show_settings(callback, db)

@router.callback_query(F.data == "delete_photo")
async def delete_photo_handler(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    await callback.answer()
    await show_delete_photo_menu(callback, db)

@router.callback_query(F.data == "delete_photo_menu")
async def show_delete_photo_menu(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ —Å –ø—Ä–µ–≤—å—é"""
    await callback.answer()
    
    user_id = callback.from_user.id
    photos = await db.get_user_photos(user_id)
    
    if not photos:
        try:
            await callback.message.edit_text(
                "üì∏ <b>–£ —Ç–µ–±—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Ñ–æ—Ç–æ –≤ –∞–Ω–∫–µ—Ç—É!",
                parse_mode="HTML",
                reply_markup=get_photo_management_keyboard()
            )
        except Exception:
            await callback.message.answer(
                "üì∏ <b>–£ —Ç–µ–±—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Ñ–æ—Ç–æ –≤ –∞–Ω–∫–µ—Ç—É!",
                parse_mode="HTML",
                reply_markup=get_photo_management_keyboard()
            )
        return

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    try:
        await callback.message.edit_text(
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ</b>\n\n"
            f"–£ —Ç–µ–±—è {len(photos)} —Ñ–æ—Ç–æ. –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –≤—Å–µ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
            f"–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Ç–µ–º —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_photos")
            ]])
        )
    except Exception:
        await callback.message.answer(
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ</b>\n\n"
            f"–£ —Ç–µ–±—è {len(photos)} —Ñ–æ—Ç–æ. –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –≤—Å–µ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
            f"–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Ç–µ–º —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_photos")
            ]])
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    for i, photo in enumerate(photos, 1):
        builder = InlineKeyboardBuilder()
        
        button_text = f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ {i}"
        if photo.is_main:
            button_text += " ‚≠ê (–≥–ª–∞–≤–Ω–æ–µ)"
            
        builder.button(
            text=button_text,
            callback_data=f"delete_photo_{photo.photo_id}"
        )
        
        try:
            await callback.message.answer_photo(
                photo=photo.file_id,
                caption=f"üì∏ <b>–§–æ—Ç–æ {i} –∏–∑ {len(photos)}</b>" + (" ‚≠ê <i>(–≥–ª–∞–≤–Ω–æ–µ)</i>" if photo.is_main else ""),
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            logger.error(f"Error sending photo for deletion: {e}")


@router.callback_query(F.data.startswith("delete_photo_") & ~F.data.endswith("_menu"))
async def delete_photo_handler(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    await callback.answer()
    
    try:
        photo_id = int(callback.data.split("_")[-1])
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    user_id = callback.from_user.id
    
    success = await db.delete_user_photo(user_id, photo_id)
    
    if success:
        photos = await db.get_user_photos(user_id)
        from utils.keyboards import get_photo_management_keyboard
        try:
            await callback.message.edit_text(
                f"‚úÖ <b>–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ</b>\n\n"
                f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {len(photos)} —Ñ–æ—Ç–æ –∏–∑ 5 –≤–æ–∑–º–æ–∂–Ω—ã—Ö",
                parse_mode="HTML",
                reply_markup=get_photo_management_keyboard()
            )
        except Exception as e:
            await callback.message.answer(
                f"‚úÖ <b>–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ</b>\n\n"
                f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {len(photos)} —Ñ–æ—Ç–æ –∏–∑ 5 –≤–æ–∑–º–æ–∂–Ω—ã—Ö",
                parse_mode="HTML",
                reply_markup=get_photo_management_keyboard()
            )
    else:
        try:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ",
                parse_mode="HTML",
                reply_markup=get_back_to_menu_keyboard()
            )
        except Exception as e:
            await callback.message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ",
                parse_mode="HTML",
                reply_markup=get_back_to_menu_keyboard()
            )

@router.callback_query(F.data == "view_all_photos")
async def view_all_photos_handler(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ"""
    await callback.answer()
    await view_photos_handler(callback, db)

@router.callback_query(F.data == "view_photos")
async def view_photos_handler(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    
    user_id = callback.from_user.id
    photos = await db.get_user_photos(user_id)
    
    if not photos:
        from utils.keyboards import get_photo_management_keyboard
        try:
            await callback.message.edit_text(
                "üì∏ <b>–£ —Ç–µ–±—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>\n\n"
                "–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ –≤ –∞–Ω–∫–µ—Ç—É!",
                parse_mode="HTML",
                reply_markup=get_photo_management_keyboard()
            )
        except Exception:
            await callback.message.answer(
                "üì∏ <b>–£ —Ç–µ–±—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>\n\n"
                "–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ –≤ –∞–Ω–∫–µ—Ç—É!",
                parse_mode="HTML",
                reply_markup=get_photo_management_keyboard()
            )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
    await callback.message.answer(
        f"üì∏ <b>–¢–≤–æ–∏ —Ñ–æ—Ç–æ ({len(photos)})</b>",
        parse_mode="HTML"
    )
    
    for i, photo in enumerate(photos, 1):
        try:
            await callback.message.answer_photo(
                photo=photo.file_id,
                caption=f"–§–æ—Ç–æ {i} –∏–∑ {len(photos)}"
            )
        except Exception as e:
            logger.error(f"Error sending photo: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ
    from utils.keyboards import get_photo_management_keyboard
    await callback.message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏:",
        reply_markup=get_photo_management_keyboard()
    )

@router.callback_query(F.data.startswith("set_main_photo_"))
async def set_main_photo_handler(callback: CallbackQuery, db: Database):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ"""
    await callback.answer()
    
    try:
        photo_id = int(callback.data.split("_")[-1])
        logger.info(f"Setting main photo for user {callback.from_user.id}, photo_id: {photo_id}")
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    user_id = callback.from_user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞–∫ –ø–µ—Ä–≤–æ–µ
    success = await db.set_main_photo(user_id, photo_id)
    logger.info(f"Set main photo result for user {user_id}: {success}")
    
    if success:
        await callback.answer("‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!", show_alert=True)
        photos = await db.get_user_photos(user_id)
        logger.info(f"Photos after update: {[(p.photo_id, p.is_main, p.order_num) for p in photos]}")
        from utils.keyboards import get_photo_management_keyboard
        try:
            await callback.message.edit_text(
                f"üì∏ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏</b>\n\n"
                f"–£ —Ç–µ–±—è {len(photos)} —Ñ–æ—Ç–æ –∏–∑ 5 –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n"
                f"–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                parse_mode="HTML",
                reply_markup=get_photo_management_keyboard()
            )
        except Exception:
            await callback.message.answer(
                f"üì∏ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏</b>\n\n"
                f"–£ —Ç–µ–±—è {len(photos)} —Ñ–æ—Ç–æ –∏–∑ 5 –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n"
                f"–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                parse_mode="HTML",
                reply_markup=get_photo_management_keyboard()
            )
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ", show_alert=True)

@router.callback_query(F.data == "set_main_photo")
async def set_main_photo_button_handler(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    await callback.answer()
    await show_set_main_photo_menu(callback, db)

@router.callback_query(F.data == "set_main_photo_menu")
async def show_set_main_photo_menu(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    await callback.answer()
    
    user_id = callback.from_user.id
    photos = await db.get_user_photos(user_id)
    
    if len(photos) < 2:
        await callback.answer("–£ —Ç–µ–±—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Ñ–æ—Ç–æ", show_alert=True)
        return
    
    from utils.keyboards import get_set_main_photo_keyboard
    try:
        await callback.message.edit_text(
            f"‚≠ê <b>–í—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ</b>\n\n"
            f"–í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã–º –≤ –∞–Ω–∫–µ—Ç–µ:\n"
            f"‚≠ê - —Ç–µ–∫—É—â–µ–µ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ",
            parse_mode="HTML",
            reply_markup=get_set_main_photo_keyboard(photos)
        )
    except Exception:
        await callback.message.answer(
            f"‚≠ê <b>–í—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ</b>\n\n"
            f"–í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã–º –≤ –∞–Ω–∫–µ—Ç–µ:\n"
            f"‚≠ê - —Ç–µ–∫—É—â–µ–µ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ",
            parse_mode="HTML",
            reply_markup=get_set_main_photo_keyboard(photos)
        )

def register_additional_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)

@router.callback_query(F.data == "delete_profile_confirm")
async def delete_profile_confirm(callback: CallbackQuery, db: Database):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    await callback.answer()
    
    try:
        await callback.message.edit_text(
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n\n"
            "–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:\n"
            "‚Ä¢ –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ\n"
            "‚Ä¢ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ª–∞–π–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π\n"
            "‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É?",
            parse_mode="HTML",
            reply_markup=get_delete_profile_confirm_keyboard()
        )
    except Exception:
        await callback.message.answer(
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n\n"
            "–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:\n"
            "‚Ä¢ –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ\n"
            "‚Ä¢ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ª–∞–π–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π\n"
            "‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É?",
            parse_mode="HTML",
            reply_markup=get_delete_profile_confirm_keyboard()
        )

@router.callback_query(F.data == "delete_profile_confirmed")
async def delete_profile_confirmed(callback: CallbackQuery, db: Database):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    await callback.answer("–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª—è–µ—Ç—Å—è...")
    
    user_id = callback.from_user.id
    
    try:
        # –£–¥–∞–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db.delete_user_profile(user_id)
        
        from utils.keyboards import get_main_menu_keyboard
        
        await callback.message.edit_text(
            "‚úÖ <b>–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞</b>\n\n"
            "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard(has_profile=False)
        )
    except Exception as e:
        logger.error(f"Error deleting profile: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ" –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data.startswith("keep_"))
async def keep_field_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ'"""
    await callback.answer()
    
    field = callback.data.split("_")[1]  # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ (name, age, city, bio)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ profile_edit
    from handlers.profile_edit import handle_keep_current
    await handle_keep_current(callback, state, db, field)

@router.callback_query(F.data.startswith("skip_"))
async def skip_field_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"""
    await callback.answer()
    
    field = callback.data.split("_")[1]  # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ (name, age, city, bio)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ profile_edit
    from handlers.profile_edit import handle_keep_current
    # –î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
    await handle_keep_current(callback, state, db, field)
