from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InputMediaPhoto
from database import Database
from utils.keyboards import get_main_menu_keyboard, get_like_response_keyboard
import logging

logger = logging.getLogger(__name__)

router = Router()

async def safe_edit_message(message, text: str = None, media=None, reply_markup=None, parse_mode="HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback"""
    try:
        if media:
            await message.edit_media(
                media=media,
                reply_markup=reply_markup
            )
        elif text:
            await message.edit_text(
                text=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
    except:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await message.delete()
        except:
            pass
        
        if media and hasattr(media, 'media'):
            await message.answer_photo(
                photo=media.media,
                caption=media.caption,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
        elif text:
            await message.answer(
                text=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )

@router.callback_query(F.data == "my_chats")
async def show_incoming_likes(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ª–∞–π–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    await callback.answer()
    
    user_id = callback.from_user.id
    incoming_likes = await db.get_incoming_likes(user_id)
    
    if not incoming_likes:
        try:
            await callback.message.edit_text(
                "üíï <b>–í—Ö–æ–¥—è—â–∏–µ –ª–∞–π–∫–∏</b>\n\n"
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ª–∞–π–∫–æ–≤!\n"
                "–ü–æ–ø—Ä–æ–±—É–π —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üëÄ",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard(has_profile=True)
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            await callback.message.answer(
                "üíï <b>–í—Ö–æ–¥—è—â–∏–µ –ª–∞–π–∫–∏</b>\n\n"
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ª–∞–π–∫–æ–≤!\n"
                "–ü–æ–ø—Ä–æ–±—É–π —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üëÄ",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard(has_profile=True)
            )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∞–π–∫
    await show_like_profile(callback.message, db, user_id, 0)

async def show_like_profile(message, db: Database, user_id: int, like_index: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ª–∞–π–∫–Ω—É–ª"""
    incoming_likes = await db.get_incoming_likes(user_id)
    
    if like_index >= len(incoming_likes):
        await safe_edit_message(
            message,
            text="‚úÖ <b>–í—Å–µ –ª–∞–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!</b>\n\n"
                 "–ë–æ–ª—å—à–µ –Ω–æ–≤—ã—Ö –ª–∞–π–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_main_menu_keyboard(has_profile=True)
        )
        return
    
    like_data = incoming_likes[like_index]
    liked_user_id = like_data['user_id']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    gender_emoji = "üë®" if like_data['gender'] == "male" else "üë©"
    
    profile_text = (
        f"üíï <b>–ö—Ç–æ-—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è!</b>\n\n"
        f"{gender_emoji} <b>{like_data['name']}</b>, {like_data['age']} –ª–µ—Ç\n"
        f"üèôÔ∏è {like_data['city']}\n\n"
        f"üìñ <b>–û —Å–µ–±–µ:</b>\n{like_data['bio']}\n\n"
        f"üìä –õ–∞–π–∫ {like_index + 1} –∏–∑ {len(incoming_likes)}"
    )
    
    keyboard = get_like_response_keyboard(liked_user_id, like_index)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å —Ñ–æ—Ç–æ
    if like_data['main_photo']:
        media = InputMediaPhoto(
            media=like_data['main_photo'],
            caption=profile_text,
            parse_mode="HTML"
        )
        await safe_edit_message(message, media=media, reply_markup=keyboard)
    else:
        # –ë–µ–∑ —Ñ–æ—Ç–æ
        await safe_edit_message(message, text=profile_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("like_response_"))
async def handle_like_response(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª–∞–π–∫"""
    await callback.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: like_response_{action}_{liked_user_id}_{like_index}
    parts = callback.data.split("_")
    action = parts[2]  # like –∏–ª–∏ dislike
    liked_user_id = int(parts[3])
    like_index = int(parts[4])
    
    user_id = callback.from_user.id
    is_like = (action == "like")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ª–∞–π–∫
    is_match = await db.respond_to_like(user_id, liked_user_id, is_like)
    
    if is_match:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –º–∞—Ç—á–µ
        liked_user = await db.get_user(liked_user_id)
        current_user = await db.get_user(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏
        liked_user_link = f"tg://user?id={liked_user_id}"
        current_user_link = f"tg://user?id={user_id}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º username –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        liked_username = f"@{liked_user.username}" if liked_user.username else liked_user.name
        current_username = f"@{current_user.username}" if current_user.username else current_user.name
        
        match_text = (
            f"üéâ <b>–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!</b>\n\n"
            f"–¢—ã –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è(–ª–∞—Å—å) <a href='{liked_user_link}'>{liked_user.name}</a> –∏ –æ–Ω(–∞) —Ç–µ–±–µ —Ç–æ–∂–µ!\n\n"
            f"üí¨ <b>–î–ª—è –æ–±—â–µ–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –∏–º—è {liked_user.name} –≤—ã—à–µ\n"
            f"‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {liked_username}\n"
            f"‚Ä¢ –ù–∞—á–∏–Ω–∞–π –¥–∏–∞–ª–æ–≥! üíï"
        )
        
        # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            match_text_for_liked_user = (
                f"üéâ <b>–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!</b>\n\n"
                f"–¢—ã –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è(–ª–∞—Å—å) <a href='{current_user_link}'>{current_user.name}</a> –∏ –æ–Ω(–∞) —Ç–µ–±–µ —Ç–æ–∂–µ!\n\n"
                f"üí¨ <b>–î–ª—è –æ–±—â–µ–Ω–∏—è:</b>\n"
                f"‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –∏–º—è {current_user.name} –≤—ã—à–µ\n"
                f"‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {current_username}\n"
                f"‚Ä¢ –ù–∞—á–∏–Ω–∞–π –¥–∏–∞–ª–æ–≥! üíï"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            from aiogram import Bot
            from config import Config
            bot = Bot(token=Config.BOT_TOKEN)
            await bot.send_message(
                chat_id=liked_user_id,
                text=match_text_for_liked_user,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"Failed to send match notification to user {liked_user_id}: {e}")
        
        await callback.message.answer(
            match_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ª–∞–π–∫
    await show_like_profile(callback.message, db, user_id, like_index + 1)

@router.callback_query(F.data.startswith("skip_like_"))
async def skip_like(callback: CallbackQuery, db: Database):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–∞–π–∫–∞"""
    await callback.answer()
    
    # –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å: skip_like_{like_index}
    like_index = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ª–∞–π–∫
    await show_like_profile(callback.message, db, user_id, like_index + 1)

def register_chat_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–∞—Ç–æ–≤"""
    dp.include_router(router)
