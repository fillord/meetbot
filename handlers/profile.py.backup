from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PhotoSize, Location
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import Database
from utils.keyboards import *
from utils.validators import *
from utils.ai_helper import ai_helper
from config import Config
import logging
import aiohttp
import json

logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("profile"))
async def profile_command(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user or not user.name:
        await message.answer(
            "‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã!\n"
            "–°–æ–∑–¥–∞–π –µ—ë —Å–Ω–∞—á–∞–ª–∞:",
            reply_markup=get_main_menu_keyboard(has_profile=False)
        )
        return
    
    await show_user_profile(message, db, user_id, is_own=True)

class ProfileStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_city = State()
    waiting_for_location = State()
    waiting_for_bio = State()
    waiting_for_photo = State()
    editing_field = State()

@router.callback_query(F.data.startswith("gender_"), StateFilter(None))
async def process_gender_selection(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è)"""
    await callback.answer()
    
    gender = callback.data.split("_")[1]  # male –∏–ª–∏ female
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª
    await db.create_or_update_user(user_id, gender=gender)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    await callback.message.edit_text(
        "‚ù§Ô∏è <b>–ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å?</b>\n\n"
        "–í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:",
        parse_mode="HTML",
        reply_markup=get_looking_for_keyboard()
    )

@router.callback_query(F.data.startswith("looking_"), StateFilter(None))
async def process_looking_for_selection(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è)"""
    await callback.answer()
    
    looking_for = callback.data.split("_")[1]  # male, female –∏–ª–∏ both
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    await db.create_or_update_user(user_id, looking_for=looking_for)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
    await state.set_state(ProfileStates.waiting_for_name)
    await callback.message.edit_text(
        "üìù <b>–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?</b>\n\n"
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è (–∏–ª–∏ –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞–ª–∏):",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )

@router.message(ProfileStates.waiting_for_name)
async def process_name_input(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    is_valid, name, error = validate_name(message.text)
    
    if not is_valid:
        await message.answer(
            f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    user_id = message.from_user.id
    await db.create_or_update_user(user_id, name=name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤–æ–∑—Ä–∞—Å—Ç–∞
    await state.set_state(ProfileStates.waiting_for_age)
    await message.answer(
        "üéÇ <b>–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?</b>\n\n"
        f"–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç {Config.MIN_AGE} –¥–æ {Config.MAX_AGE} –ª–µ—Ç):",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )

@router.message(ProfileStates.waiting_for_age)
async def process_age_input(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    is_valid, age, error = validate_age(message.text)
    
    if not is_valid:
        await message.answer(
            f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    user_id = message.from_user.id
    await db.create_or_update_user(user_id, age=age)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await state.set_state(ProfileStates.waiting_for_location)
    await message.answer(
        "üìç <b>–£–∫–∞–∂–∏ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>\n\n"
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üëá\n\n"
        "‚ö†Ô∏è <i>–≠—Ç–æ—Ç —à–∞–≥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º</i>",
        parse_mode="HTML",
        reply_markup=get_location_keyboard()
    )

async def get_city_from_coordinates(lat: float, lon: float) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —á–µ—Ä–µ–∑ OpenStreetMap Nominatim API"""
    try:
        url = f"https://nominatim.openstreetmap.org/reverse?format=json&lat={lat}&lon={lon}&zoom=10&addressdetails=1"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers={'User-Agent': 'Meet Bot'}) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    address = data.get('address', {})
                    city = (address.get('city') or 
                           address.get('town') or 
                           address.get('village') or 
                           address.get('municipality') or
                           address.get('county') or
                           '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥')
                    
                    return city
                else:
                    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"

@router.message(ProfileStates.waiting_for_location)
async def process_location_input(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    if message.location:
        # –ü–æ–ª—É—á–∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        lat = message.location.latitude
        lon = message.location.longitude
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        city = await get_city_from_coordinates(lat, lon)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –≥–æ—Ä–æ–¥
        user_id = message.from_user.id
        await db.create_or_update_user(
            user_id, 
            latitude=lat, 
            longitude=lon, 
            city=city
        )
        
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
        from aiogram.types import ReplyKeyboardRemove
        await message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —Ç–≤–æ–π –≥–æ—Ä–æ–¥: <b>{city}</b>\n"
            f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π —Ä—è–¥–æ–º",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
        await state.set_state(ProfileStates.waiting_for_bio)
        await message.answer(
            "üìñ <b>–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ</b>\n\n"
            f"–ù–∞–ø–∏—à–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–æ—Ç 10 –¥–æ {Config.MAX_BIO_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ß—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è? –ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è? –ß—Ç–æ –∏—â–µ—à—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?\n\n"
            "‚ö†Ô∏è <i>–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</i>",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, —Ç–æ –ø—Ä–æ—Å–∏–º –µ—â–µ —Ä–∞–∑
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=get_location_keyboard()
        )

@router.message(ProfileStates.waiting_for_city)
async def process_city_input(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é)"""
    await message.answer(
        "üîÑ –¢–µ–ø–µ—Ä—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
        reply_markup=get_location_keyboard()
    )

@router.message(ProfileStates.waiting_for_bio)
async def process_bio_input(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    is_valid, bio, error = validate_bio(message.text)
    
    if not is_valid:
        await message.answer(
            f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é AI
    content_check = await ai_helper.check_content_safety(bio)
    if not content_check:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É:",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    user_id = message.from_user.id
    await db.create_or_update_user(user_id, bio=bio)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ
    await state.set_state(ProfileStates.waiting_for_photo)
    await message.answer(
        "üì∏ <b>–î–æ–±–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ</b>\n\n"
        "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≥–ª–∞–≤–Ω–æ–π –≤ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ.\n"
        f"–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ {Config.MAX_PHOTOS_PER_PROFILE} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )

@router.message(ProfileStates.waiting_for_photo, F.photo)
async def process_photo_input(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    user_id = message.from_user.id
    
    logger.info(f"Processing photo input for user {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo = message.photo[-1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_photos = await db.get_user_photos(user_id)
    logger.info(f"User {user_id} has {len(existing_photos)} existing photos")
    
    if len(existing_photos) >= Config.MAX_PHOTOS_PER_PROFILE:
        await message.answer(
            f"‚ùå –£ —Ç–µ–±—è —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ({Config.MAX_PHOTOS_PER_PROFILE})"
        )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        await finalize_profile_creation(message, state, db)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    is_main = len(existing_photos) == 0  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º
    logger.info(f"Adding photo for user {user_id}, is_main: {is_main}")
    
    await db.add_user_photo(
        user_id=user_id,
        file_id=photo.file_id,
        file_unique_id=photo.file_unique_id,
        is_main=is_main
    )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    current_count = len(existing_photos) + 1
    max_photos = Config.MAX_PHOTOS_PER_PROFILE
    
    logger.info(f"Photo added for user {user_id}, current count: {current_count}")
    
    if current_count == 1:
        await message.answer(
            f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üì∏ –£ —Ç–µ–±—è {current_count} –∏–∑ {max_photos} —Ñ–æ—Ç–æ\n\n"
            f"–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã:",
            reply_markup=get_photo_add_keyboard()
        )
    elif current_count < max_photos:
        await message.answer(
            f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üì∏ –£ —Ç–µ–±—è {current_count} –∏–∑ {max_photos} —Ñ–æ—Ç–æ\n\n"
            f"–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã:",
            reply_markup=get_photo_add_keyboard()
        )
    else:
        # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        await message.answer(f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ({max_photos} —Ñ–æ—Ç–æ)")
        await finalize_profile_creation(message, state, db)

@router.message(ProfileStates.waiting_for_photo)
async def process_invalid_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ–æ—Ç–æ"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
        reply_markup=get_photo_add_keyboard()
    )

@router.callback_query(F.data == "add_more_photo", ProfileStates.waiting_for_photo)
async def continue_adding_photos(callback: CallbackQuery):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await callback.answer()
    await callback.message.edit_text(
        "üì∏ <b>–î–æ–±–∞–≤—å –µ—â–µ —Ñ–æ—Ç–æ</b>\n\n"
        "–ü—Ä–∏—à–ª–∏ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã.",
        parse_mode="HTML",
        reply_markup=get_photo_add_keyboard()
    )

@router.callback_query(F.data == "finish_profile", ProfileStates.waiting_for_photo)
async def finish_profile_creation(callback: CallbackQuery, state: FSMContext, db: Database):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    await callback.answer()
    logger.info(f"Finish profile button clicked by user {callback.from_user.id}")
    await finalize_profile_creation(callback.message, state, db)

async def finalize_profile_creation(message, state: FSMContext, db: Database):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    
    logger.info(f"Finalizing profile creation for user {user_id}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    user = await db.get_user(user_id)
    logger.info(f"User exists check: {user is not None}")
    if user:
        logger.info(f"User data: name='{user.name}', age={user.age}, city='{user.city}', gender='{user.gender}', looking_for='{user.looking_for}'")
    else:
        logger.error(f"User {user_id} not found in database during profile finalization!")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard(has_profile=False)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
    photos = await db.get_user_photos(user_id)
    logger.info(f"User {user_id} has {len(photos)} photos")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—É—é –∞–Ω–∫–µ—Ç—É
    try:
        await show_user_profile(message, db, user_id, is_own=True)
    except Exception as e:
        logger.error(f"Error showing profile for user {user_id}: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
        await show_profile_without_photo(message, db, user_id)
    
    await message.answer(
        "üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard(has_profile=True)
    )

async def show_profile_without_photo(message, db: Database, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    user = await db.get_user(user_id)
    if not user:
        await message.answer(
            "‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=get_main_menu_keyboard(has_profile=False)
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
    gender_emoji = "üë®" if user.gender == "male" else "üë©"
    looking_emoji = "üë®" if user.looking_for == "male" else "üë©" if user.looking_for == "female" else "üåà"
    
    text = (
        f"üì∑ <i>–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>\n\n"
        f"{gender_emoji} <b>{user.name}</b>, {user.age} –ª–µ—Ç\n"
        f"üèôÔ∏è {user.city}\n\n"
        f"üìñ <b>–û —Å–µ–±–µ:</b>\n{user.bio}\n\n"
        f"‚ù§Ô∏è <b>–ò—â–µ—Ç:</b> {looking_emoji} "
    )
    
    if user.looking_for == "male":
        text += "–ü–∞—Ä–Ω–µ–π"
    elif user.looking_for == "female":
        text += "–î–µ–≤—É—à–µ–∫"
    else:
        text += "–í—Å–µ—Ö"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
    text += f"\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {user.profile_views}\n"
    text += f"‚ù§Ô∏è –õ–∞–π–∫–∏: {user.likes_received}"
    
    keyboard = get_profile_keyboard(is_own=True)
    
    await message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
    gender_emoji = "üë®" if user.gender == "male" else "üë©"
    looking_emoji = "üë®" if user.looking_for == "male" else "üë©" if user.looking_for == "female" else "üåà"
    
    text = (
        f"üì∑ <i>–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>

"
        f"{gender_emoji} <b>{user.name}</b>, {user.age} –ª–µ—Ç
"
        f"üèôÔ∏è {user.city}

"
        f"üìñ <b>–û —Å–µ–±–µ:</b>
{user.bio}

"
        f"‚ù§Ô∏è <b>–ò—â–µ—Ç:</b> {looking_emoji} "
    )
    
    if user.looking_for == "male":
        text += "–ü–∞—Ä–Ω–µ–π"
    elif user.looking_for == "female":
        text += "–î–µ–≤—É—à–µ–∫"
    else:
        text += "–í—Å–µ—Ö"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
    text += f"

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
"
    text += f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {user.profile_views}
"
    text += f"‚ù§Ô∏è –õ–∞–π–∫–∏: {user.likes_received}"
    
    keyboard = get_profile_keyboard(is_own=True)
    
    await message.answer(
        text=text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "my_profile")
async def show_my_profile(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É"""
    await callback.answer()
    
    user_id = callback.from_user.id
    await show_user_profile(callback.message, db, user_id, is_own=True, edit_message=True)

async def show_user_profile(message: Message, db: Database, user_id: int, is_own: bool = False, edit_message: bool = False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    user = await db.get_user(user_id)
    if not user:
        text = "‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        keyboard = get_main_menu_keyboard(has_profile=False)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
        gender_emoji = "üë®" if user.gender == "male" else "üë©"
        looking_emoji = "üë®" if user.looking_for == "male" else "üë©" if user.looking_for == "female" else "üåà"
        
        text = (
            f"{gender_emoji} <b>{user.name}</b>, {user.age} –ª–µ—Ç\n"
            f"üèôÔ∏è {user.city}\n\n"
            f"üìñ <b>–û —Å–µ–±–µ:</b>\n{user.bio}\n\n"
            f"‚ù§Ô∏è <b>–ò—â–µ—Ç:</b> {looking_emoji} "
        )
        
        if user.looking_for == "male":
            text += "–ü–∞—Ä–Ω–µ–π"
        elif user.looking_for == "female":
            text += "–î–µ–≤—É—à–µ–∫"
        else:
            text += "–í—Å–µ—Ö"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
        if is_own:
            text += f"\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            text += f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {user.profile_views}\n"
            text += f"‚ù§Ô∏è –õ–∞–π–∫–∏: {user.likes_received}"
        
        keyboard = get_profile_keyboard(is_own=is_own)
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ (–ø–µ—Ä–≤–æ–µ –≤ —Å–ø–∏—Å–∫–µ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ is_main DESC)
    photos = await db.get_user_photos(user_id)
    main_photo = photos[0] if photos else None
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Showing profile for user {user_id}, photos: {[(p.photo_id, p.is_main, p.order_num) for p in photos]}")
    if main_photo:
        logger.info(f"Selected main photo: {main_photo.photo_id} (is_main: {main_photo.is_main})")
    
    try:
        if main_photo:
            if edit_message:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
                try:
                    await message.delete()
                except:
                    pass
                await message.answer_photo(
                    photo=main_photo.file_id,
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                await message.answer_photo(
                    photo=main_photo.file_id,
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
        else:
            if edit_message:
                await message.edit_text(
                    text=f"üì∑ <i>–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>\n\n{text}",
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                await message.answer(
                    text=f"üì∑ <i>–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>\n\n{text}",
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
    except Exception as e:
        logger.error(f"Error showing profile: {e}")
        if edit_message:
            await message.edit_text(
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )

@router.callback_query(F.data == "edit_profile")
async def show_edit_profile_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    await callback.answer()
    
    try:
        await callback.message.edit_caption(
            caption="‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
            parse_mode="HTML",
            reply_markup=get_edit_profile_keyboard()
        )
    except Exception as e:
        logger.error(f"Error editing profile menu caption: {e}")
        try:
            await callback.message.edit_text(
                "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
                parse_mode="HTML",
                reply_markup=get_edit_profile_keyboard()
            )
        except Exception as e2:
            logger.error(f"Error editing profile menu text: {e2}")
            await callback.message.answer(
                "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
                parse_mode="HTML",
                reply_markup=get_edit_profile_keyboard()
            )

@router.callback_query(F.data == "improve_with_ai")
async def improve_profile_with_ai(callback: CallbackQuery, db: Database):
    """–£–ª—É—á—à–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é AI"""
    await callback.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É...")
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user or not user.bio:
        try:
            await callback.message.edit_caption(
                caption="‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã",
                parse_mode="HTML",
                reply_markup=get_profile_keyboard(is_own=True)
            )
        except Exception:
            await callback.message.edit_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã",
                parse_mode="HTML",
                reply_markup=get_profile_keyboard(is_own=True)
            )
        return
    
    # –£–ª—É—á—à–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
    user_data = {
        'name': user.name,
        'age': user.age,
        'city': user.city,
        'gender': user.gender
    }
    
    improved_bio = await ai_helper.improve_bio_with_ai(user.bio, user_data)
    
    if improved_bio:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        await db.create_or_update_user(user_id, bio=improved_bio)
        
        try:
            await callback.message.edit_caption(
                caption="‚ú® <b>–û–ø–∏—Å–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é AI!</b>\n\n–í–æ—Ç —Ç–≤–æ—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞:",
                parse_mode="HTML",
                reply_markup=get_back_to_menu_keyboard()
            )
        except Exception:
            await callback.message.edit_text(
                "‚ú® <b>–û–ø–∏—Å–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é AI!</b>\n\n–í–æ—Ç —Ç–≤–æ—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞:",
                parse_mode="HTML",
                reply_markup=get_back_to_menu_keyboard()
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É
        await show_user_profile(callback.message, db, user_id, is_own=True)
    else:
        try:
            await callback.message.edit_caption(
                caption="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. AI-—Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                parse_mode="HTML",
                reply_markup=get_profile_keyboard(is_own=True)
            )
        except Exception:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. AI-—Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                parse_mode="HTML",
                reply_markup=get_profile_keyboard(is_own=True)
            )

def register_profile_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è"""
    dp.include_router(router)
