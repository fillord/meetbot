from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
import aiosqlite
from database import Database
from utils.keyboards import (
    get_main_menu_keyboard, 
    get_main_menu_keyboard_with_likes, 
    get_gender_keyboard,
    get_main_menu_reply_keyboard,
    get_main_menu_reply_keyboard_with_likes
)
from utils.profile_utils import is_profile_complete
from utils.message_utils import safe_edit_message, safe_answer_message
from config import Config

router = Router()

@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.create_or_update_user(
        user_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–Ω–∫–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    
    if not user or not user.name or not user.age or not user.gender:
        # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
        await message.answer(
            "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Meet Bot!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. "
            "–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç ‚ú®",
            parse_mode="HTML",
            reply_markup=get_main_menu_reply_keyboard(has_profile=False)
        )
    else:
        # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –µ—Å—Ç—å
        keyboard = await get_main_menu_reply_keyboard_with_likes(db, user_id, has_profile=True)
        await message.answer(
            f"üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.name}!\n\n"
            "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
            parse_mode="HTML",
            reply_markup=keyboard
        )

@router.callback_query(F.data == "create_profile")
async def start_profile_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    await callback.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    await state.clear()
    
    await safe_edit_message(
        callback.message,
        text="üé≠ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n"
             "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=get_gender_keyboard()
    )

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery, state: FSMContext, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    has_profile = is_profile_complete(user)
    
    if has_profile:
        text = f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–ü—Ä–∏–≤–µ—Ç, {user.name}! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?"
        keyboard = await get_main_menu_reply_keyboard_with_likes(db, user_id, has_profile=True)
    else:
        text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É!"
        keyboard = get_main_menu_reply_keyboard(has_profile=False)
    
    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
    except:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

@router.callback_query(F.data == "statistics")
async def show_statistics(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await safe_edit_message(
            callback.message,
            text="‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É!",
            reply_markup=get_main_menu_keyboard(has_profile=False)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_user_statistics(user_id)
    
    if not stats:
        await safe_edit_message(
            callback.message,
            text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_main_menu_keyboard(has_profile=True)
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    from datetime import datetime
    
    created_at = stats['created_at']
    if isinstance(created_at, str):
        try:
            created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
        except:
            created_at = datetime.now()
    
    last_active = stats['last_active']
    if isinstance(last_active, str):
        try:
            last_active = datetime.fromisoformat(last_active.replace('Z', '+00:00'))
        except:
            last_active = datetime.now()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_emoji = "üü¢" if (datetime.now() - last_active).days < 1 else "üü°" if (datetime.now() - last_active).days < 7 else "üî¥"
    
    stats_text = (
        f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        
        f"<b>üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∞–Ω–∫–µ—Ç—ã: {stats['profile_views']} üëÅÔ∏è\n"
        f"‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∞–Ω–∫–µ—Ç–µ: {stats['photo_count']}/5 üì∏\n\n"
        
        f"<b>üíå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ª–∞–π–∫–∞—Ö:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['likes_sent']} ‚û°Ô∏è\n"
        f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['today_likes']} üî•\n"
        f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –ª–∞–π–∫–æ–≤: {stats['likes_received']} ‚¨ÖÔ∏è\n"
        f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {stats['week_incoming']} üìà\n\n"
        
        f"<b>ÔøΩ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤:</b>\n"
        f"‚Ä¢ –í–∑–∞–∏–º–Ω—ã—Ö —Å–∏–º–ø–∞—Ç–∏–π: {stats['matches_count']} üíù\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['active_matches']} üí¨\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ª–∞–π–∫–æ–≤: {stats['success_rate']}% üéØ\n\n"
        
        f"<b>üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:</b>\n"
        f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at.strftime('%d.%m.%Y')} üìÖ\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active.strftime('%d.%m.%Y %H:%M')} {activity_emoji}\n\n"
        
        f"<i>–°–æ–≤–µ—Ç: –û–±–Ω–æ–≤–ª—è–π —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–µ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏! ‚ú®</i>"
    )
    
    from utils.keyboards import get_statistics_keyboard
    await safe_edit_message(
        callback.message,
        text=stats_text,
        reply_markup=get_statistics_keyboard()
    )

@router.callback_query(F.data == "about")
async def show_about(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    await callback.answer()
    
    about_text = (
        "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ Meet Bot</b>\n\n"
        "ü§ñ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —Å AI-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏\n\n"
        "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∞–Ω–∫–µ—Ç\n"
        "‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ üíå –°–∏—Å—Ç–µ–º–∞ –ª–∞–π–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π\n"
        "‚Ä¢ ÔøΩ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ö–æ–¥—è—â–∏—Ö –ª–∞–π–∫–æ–≤\n"
        "‚Ä¢ ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∫–µ—Ç\n"
        "‚Ä¢ üìç –ü–æ–∏—Å–∫ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n"
        "‚Ä¢ üé® –î–æ 5 —Ñ–æ—Ç–æ –≤ –∞–Ω–∫–µ—Ç–µ\n\n"
        "–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤!"
    )
    
    from utils.keyboards import get_back_to_menu_keyboard
    await safe_edit_message(
        callback.message,
        text=about_text,
        reply_markup=get_back_to_menu_keyboard()
    )

@router.callback_query(F.data == "top_users")
async def show_top_users(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await callback.answer()
    
    top_data = await db.get_top_users(limit=5)
    
    text = "üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
    
    # –¢–æ–ø –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    if top_data['popular']:
        text += "<b>üëë –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ:</b>\n"
        for i, user in enumerate(top_data['popular'], 1):
            text += f"{i}. {user['name']} - {user['likes_received']} ‚ù§Ô∏è\n"
        text += "\n"
    
    # –¢–æ–ø –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if top_data['active']:
        text += "<b>üî• –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ:</b>\n"
        for i, user in enumerate(top_data['active'], 1):
            text += f"{i}. {user['name']} - {user['likes_sent']} –ª–∞–π–∫–æ–≤\n"
        text += "\n"
    
    # –¢–æ–ø –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    if top_data['successful']:
        text += "<b>üéØ –°–∞–º—ã–µ —É—Å–ø–µ—à–Ω—ã–µ:</b>\n"
        for i, user in enumerate(top_data['successful'], 1):
            text += f"{i}. {user['name']} - {user['success_rate']}% —É—Å–ø–µ—Ö–∞\n"
    
    if not any(top_data.values()):
        text += "–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ üìä"
    
    from utils.keyboards import get_back_to_menu_keyboard
    await safe_edit_message(
        callback.message,
        text=text,
        reply_markup=get_back_to_menu_keyboard()
    )

@router.callback_query(F.data == "global_stats")
async def show_global_statistics(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    await callback.answer()
    
    async with aiosqlite.connect(db.db_path) as database:
        database.row_factory = aiosqlite.Row
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor = await database.execute('SELECT COUNT(*) as total_users FROM users')
        total_users = (await cursor.fetchone())['total_users']
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞—Ö–æ–¥–∏–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é)
        cursor = await database.execute(
            "SELECT COUNT(*) as active_users FROM users WHERE last_active >= datetime('now', '-7 days')"
        )
        active_users = (await cursor.fetchone())['active_users']
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –∞–Ω–∫–µ—Ç–∞–º–∏
        cursor = await database.execute(
            'SELECT COUNT(*) as complete_profiles FROM users WHERE name IS NOT NULL AND age IS NOT NULL AND gender IS NOT NULL'
        )
        complete_profiles = (await cursor.fetchone())['complete_profiles']
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
        cursor = await database.execute('SELECT COUNT(*) as total_likes FROM swipes WHERE is_like = 1')
        total_likes = (await cursor.fetchone())['total_likes']
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
        cursor = await database.execute('SELECT COUNT(*) as total_matches FROM matches')
        total_matches = (await cursor.fetchone())['total_matches']
        
        # –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor = await database.execute('SELECT AVG(age) as avg_age FROM users WHERE age IS NOT NULL')
        avg_age_result = await cursor.fetchone()
        avg_age = round(avg_age_result['avg_age'], 1) if avg_age_result['avg_age'] else 0
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è
        cursor = await database.execute(
            "SELECT COUNT(*) as today_likes FROM swipes WHERE is_like = 1 AND date(created_at) = date('now')"
        )
        today_likes = (await cursor.fetchone())['today_likes']
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ (–º–∞—Ç—á–∏ –æ—Ç –ª–∞–π–∫–æ–≤)
    match_rate = round((total_matches / total_likes * 100), 1) if total_likes > 0 else 0
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    activity_rate = round((active_users / total_users * 100), 1) if total_users > 0 else 0
    
    global_stats_text = (
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        
        f"<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_users} üë§\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users} ({activity_rate}%) üü¢\n"
        f"‚Ä¢ –° –ø–æ–ª–Ω—ã–º–∏ –∞–Ω–∫–µ—Ç–∞–º–∏: {complete_profiles} ‚úÖ\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {avg_age} –ª–µ—Ç üìä\n\n"
        
        f"<b>üíå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {total_likes} ‚ù§Ô∏è\n"
        f"‚Ä¢ –õ–∞–π–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {today_likes} üî•\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –º–∞—Ç—á–µ–π: {total_matches} üíï\n"
        f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {match_rate}% üéØ\n\n"
        
        f"<i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ ‚ö°</i>"
    )
    
    from utils.keyboards import get_back_to_menu_keyboard
    await safe_edit_message(
        callback.message,
        text=global_stats_text,
        reply_markup=get_back_to_menu_keyboard()
    )

@router.callback_query(F.data == "profile_recommendations")
async def show_profile_recommendations(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è"""
    await callback.answer()
    
    user_id = callback.from_user.id
    recommendations_data = await db.get_profile_recommendations(user_id)
    
    if not recommendations_data:
        await safe_edit_message(
            callback.message,
            text="‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É!",
            reply_markup=get_main_menu_keyboard(has_profile=False)
        )
        return
    
    text = "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
    
    # –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    text += f"<b>üìà –¢–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
    text += f"‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {recommendations_data['photo_count']}/5 üì∏\n"
    text += f"‚Ä¢ –î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è: {recommendations_data['bio_length']} —Å–∏–º–≤–æ–ª–æ–≤ ‚úçÔ∏è\n"
    text += f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {recommendations_data['profile_views']} (—Å—Ä–µ–¥–Ω: {recommendations_data['avg_views']}) üëÄ\n"
    text += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ª–∞–π–∫–æ–≤: {recommendations_data['success_rate']}% üéØ\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if recommendations_data['recommendations']:
        text += "<b>üöÄ –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:</b>\n"
        for i, rec in enumerate(recommendations_data['recommendations'], 1):
            text += f"{i}. {rec}\n"
        text += "\n"
    else:
        text += "üéâ <b>–û—Ç–ª–∏—á–Ω–∞—è –∞–Ω–∫–µ—Ç–∞!</b>\n–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–π –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º!\n\n"
    
    text += "<i>üí° –°–æ–≤–µ—Ç: —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!</i>"
    
    from utils.keyboards import get_back_to_menu_keyboard
    await safe_edit_message(
        callback.message,
        text=text,
        reply_markup=get_back_to_menu_keyboard()
    )

# ======== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò REPLY –°–û–û–ë–©–ï–ù–ò–ô ========

@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def handle_create_profile_reply(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É'"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    await state.clear()
    
    await message.answer(
        "üé≠ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
        parse_mode="HTML",
        reply_markup=get_gender_keyboard()
    )

@router.message(F.text == "üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def handle_start_swiping_reply(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply –∫–Ω–æ–ø–∫–∏ '–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã'"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user or not user.name:
        await message.answer(
            "‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã!\n"
            "–°–æ–∑–¥–∞–π –µ—ë —Å–Ω–∞—á–∞–ª–∞:",
            reply_markup=get_main_menu_reply_keyboard(has_profile=False)
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è —Å–≤–∞–π–ø–∏–Ω–≥–∞
    from handlers.swipe import show_next_profile
    await show_next_profile(message, db, user_id)

@router.message(F.text.in_(["üíå –õ–∞–π–∫–∏", "üíå –õ–∞–π–∫–∏ (1)", "üíå –õ–∞–π–∫–∏ (2)", "üíå –õ–∞–π–∫–∏ (3)", "üíå –õ–∞–π–∫–∏ (4)", "üíå –õ–∞–π–∫–∏ (5)", "üíå –õ–∞–π–∫–∏ (6)", "üíå –õ–∞–π–∫–∏ (7)", "üíå –õ–∞–π–∫–∏ (8)", "üíå –õ–∞–π–∫–∏ (9)"]))
async def handle_my_chats_reply(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply –∫–Ω–æ–ø–∫–∏ '–õ–∞–π–∫–∏'"""
    user_id = message.from_user.id
    incoming_likes = await db.get_incoming_likes(user_id)
    
    if not incoming_likes:
        await message.answer(
            "üíï <b>–í—Ö–æ–¥—è—â–∏–µ –ª–∞–π–∫–∏</b>\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ª–∞–π–∫–æ–≤!\n"
            "–ü–æ–ø—Ä–æ–±—É–π —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üëÄ",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∞–π–∫
    from handlers.chat import show_like_profile
    await show_like_profile(message, db, user_id, 0)

@router.message(F.text == "üìù –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def handle_my_profile_reply(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –∞–Ω–∫–µ—Ç–∞'"""
    from handlers.profile import profile_command
    await profile_command(message, db)

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings_reply(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user or not user.name:
        await message.answer(
            "‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã!\n"
            "–°–æ–∑–¥–∞–π –µ—ë —Å–Ω–∞—á–∞–ª–∞:",
            reply_markup=get_main_menu_reply_keyboard(has_profile=False)
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üéØ <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:</b> {user.min_age}-{user.max_age} –ª–µ—Ç\n"
        f"üìç <b>–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:</b> {user.search_radius} –∫–º\n"
        f"üëÅÔ∏è <b>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç:</b> {'–î–∞' if user.show_age else '–ù–µ—Ç'}\n"
        f"üèôÔ∏è <b>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–æ—Ä–æ–¥:</b> {'–î–∞' if user.show_location else '–ù–µ—Ç'}\n"
        f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}"
    )
    
    from utils.keyboards import get_settings_keyboard
    await message.answer(
        settings_text,
        parse_mode="HTML",
        reply_markup=get_settings_keyboard()
    )

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_statistics_reply(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É!",
            reply_markup=get_main_menu_reply_keyboard(has_profile=False)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_user_statistics(user_id)
    
    if not stats:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    from datetime import datetime
    
    created_at = stats['created_at']
    if isinstance(created_at, str):
        try:
            created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
        except:
            created_at = datetime.now()
    
    last_active = stats['last_active']
    if isinstance(last_active, str):
        try:
            last_active = datetime.fromisoformat(last_active.replace('Z', '+00:00'))
        except:
            last_active = datetime.now()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_emoji = "üü¢" if (datetime.now() - last_active).days < 1 else "üü°" if (datetime.now() - last_active).days < 7 else "üî¥"
    
    stats_text = (
        f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        
        f"<b>üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∞–Ω–∫–µ—Ç—ã: {stats['profile_views']} üëÅÔ∏è\n"
        f"‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∞–Ω–∫–µ—Ç–µ: {stats['photo_count']}/5 üì∏\n\n"
        
        f"<b>üíå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ª–∞–π–∫–∞—Ö:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['likes_sent']} ‚û°Ô∏è\n"
        f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['today_likes']} üî•\n"
        f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –ª–∞–π–∫–æ–≤: {stats['likes_received']} ‚¨ÖÔ∏è\n"
        f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {stats['week_incoming']} üìà\n\n"
        
        f"<b>üíù –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤:</b>\n"
        f"‚Ä¢ –í–∑–∞–∏–º–Ω—ã—Ö —Å–∏–º–ø–∞—Ç–∏–π: {stats['matches_count']} üíù\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['active_matches']} üí¨\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ª–∞–π–∫–æ–≤: {stats['success_rate']}% üéØ\n\n"
        
        f"<b>üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:</b>\n"
        f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at.strftime('%d.%m.%Y')} üìÖ\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active.strftime('%d.%m.%Y %H:%M')} {activity_emoji}\n\n"
        
        f"<i>–°–æ–≤–µ—Ç: –û–±–Ω–æ–≤–ª—è–π —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–µ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏! ‚ú®</i>"
    )
    
    from utils.keyboards import get_statistics_keyboard
    await message.answer(
        stats_text, 
        parse_mode="HTML",
        reply_markup=get_statistics_keyboard()
    )

@router.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def handle_about_reply(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply –∫–Ω–æ–ø–∫–∏ '–û –±–æ—Ç–µ'"""
    about_text = (
        "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ Meet Bot</b>\n\n"
        "ü§ñ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —Å AI-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏\n\n"
        "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∞–Ω–∫–µ—Ç\n"
        "‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ üíå –°–∏—Å—Ç–µ–º–∞ –ª–∞–π–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π\n"
        "‚Ä¢ üíå –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ö–æ–¥—è—â–∏—Ö –ª–∞–π–∫–æ–≤\n"
        "‚Ä¢ ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∫–µ—Ç\n"
        "‚Ä¢ üìç –ü–æ–∏—Å–∫ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n"
        "‚Ä¢ üé® –î–æ 5 —Ñ–æ—Ç–æ –≤ –∞–Ω–∫–µ—Ç–µ\n\n"
        "–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤!"
    )
    
    await message.answer(about_text, parse_mode="HTML")

@router.message(F.text == "üîô –í –º–µ–Ω—é")
async def handle_back_to_menu_reply(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply –∫–Ω–æ–ø–∫–∏ '–í –º–µ–Ω—é'"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    has_profile = is_profile_complete(user)
    
    if has_profile:
        text = f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–ü—Ä–∏–≤–µ—Ç, {user.name}! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?"
        keyboard = await get_main_menu_reply_keyboard_with_likes(db, user_id, has_profile=True)
    else:
        text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É!"
        keyboard = get_main_menu_reply_keyboard(has_profile=False)
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

def register_start_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ä—Ç–∞"""
    dp.include_router(router)
