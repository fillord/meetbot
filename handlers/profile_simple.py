from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PhotoSize, Location
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import Database
from utils.keyboards import *
from utils.validators import *
from utils.ai_helper import ai_helper
from config import Config
import logging
import aiohttp
import json

logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("profile"))
async def profile_command(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user or not user.name:
        await message.answer(
            "‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã!\n"
            "–°–æ–∑–¥–∞–π –µ—ë —Å–Ω–∞—á–∞–ª–∞:",
            reply_markup=get_main_menu_keyboard(has_profile=False)
        )
        return
    
    await show_user_profile(message, db, user_id, is_own=True)

class ProfileStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_city = State()
    waiting_for_location = State()
    waiting_for_bio = State()
    waiting_for_photo = State()
    editing_field = State()

async def finalize_profile_creation(message, state: FSMContext, db: Database):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    
    logger.info(f"Finalizing profile creation for user {user_id}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    user = await db.get_user(user_id)
    logger.info(f"User exists check: {user is not None}")
    if user:
        logger.info(f"User data: name='{user.name}', age={user.age}, city='{user.city}', gender='{user.gender}', looking_for='{user.looking_for}'")
    
    if not user:
        logger.error(f"User {user_id} not found in database during profile finalization!")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard(has_profile=False)
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—É—é –∞–Ω–∫–µ—Ç—É
    await show_user_profile(message, db, user_id, is_own=True)
    
    await message.answer(
        "üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard(has_profile=True)
    )

async def show_user_profile(message: Message, db: Database, user_id: int, is_own: bool = False, edit_message: bool = False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    user = await db.get_user(user_id)
    if not user:
        text = "‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        keyboard = get_main_menu_keyboard(has_profile=False)
        await message.answer(text, reply_markup=keyboard)
        return
        
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
    gender_emoji = "üë®" if user.gender == "male" else "üë©"
    looking_emoji = "üë®" if user.looking_for == "male" else "üë©" if user.looking_for == "female" else "üåà"
    
    text = (
        f"{gender_emoji} <b>{user.name}</b>, {user.age} –ª–µ—Ç\n"
        f"üèôÔ∏è {user.city}\n\n"
        f"üìñ <b>–û —Å–µ–±–µ:</b>\n{user.bio}\n\n"
        f"‚ù§Ô∏è <b>–ò—â–µ—Ç:</b> {looking_emoji} "
    )
    
    if user.looking_for == "male":
        text += "–ü–∞—Ä–Ω–µ–π"
    elif user.looking_for == "female":
        text += "–î–µ–≤—É—à–µ–∫"
    else:
        text += "–í—Å–µ—Ö"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
    if is_own:
        text += f"\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {user.profile_views}\n"
        text += f"‚ù§Ô∏è –õ–∞–π–∫–∏: {user.likes_received}"
    
    keyboard = get_profile_keyboard(is_own=is_own)

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ
    photos = await db.get_user_photos(user_id)
    main_photo = photos[0] if photos else None
    
    logger.info(f"Showing profile for user {user_id}, photos: {len(photos)}")
    
    try:
        if main_photo:
            await message.answer_photo(
                photo=main_photo.file_id,
                caption=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                text=f"üì∑ <i>–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>\n\n{text}",
                parse_mode="HTML",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"Error showing profile: {e}")
        await message.answer(
            text=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

@router.callback_query(F.data == "my_profile")
async def show_my_profile(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É"""
    await callback.answer()
    
    user_id = callback.from_user.id
    await show_user_profile(callback.message, db, user_id, is_own=True, edit_message=True)

@router.message(ProfileStates.waiting_for_photo, F.photo)
async def process_photo_input(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    user_id = message.from_user.id
    
    logger.info(f"Processing photo input for user {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo = message.photo[-1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_photos = await db.get_user_photos(user_id)
    logger.info(f"User {user_id} has {len(existing_photos)} existing photos")
    
    if len(existing_photos) >= Config.MAX_PHOTOS_PER_PROFILE:
        await message.answer(
            f"‚ùå –£ —Ç–µ–±—è —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ({Config.MAX_PHOTOS_PER_PROFILE})"
        )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        await finalize_profile_creation(message, state, db)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    is_main = len(existing_photos) == 0  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º
    logger.info(f"Adding photo for user {user_id}, is_main: {is_main}")
    
    await db.add_user_photo(
        user_id=user_id,
        file_id=photo.file_id,
        file_unique_id=photo.file_unique_id,
        is_main=is_main
    )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    current_count = len(existing_photos) + 1
    max_photos = Config.MAX_PHOTOS_PER_PROFILE
    
    logger.info(f"Photo added for user {user_id}, current count: {current_count}")
    
    if current_count == 1:
        await message.answer(
            f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üì∏ –£ —Ç–µ–±—è {current_count} –∏–∑ {max_photos} —Ñ–æ—Ç–æ\n\n"
            f"–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã:",
            reply_markup=get_photo_add_keyboard()
        )
    elif current_count < max_photos:
        await message.answer(
            f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üì∏ –£ —Ç–µ–±—è {current_count} –∏–∑ {max_photos} —Ñ–æ—Ç–æ\n\n"
            f"–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã:",
            reply_markup=get_photo_add_keyboard()
        )
    else:
        # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        await message.answer(f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ({max_photos} —Ñ–æ—Ç–æ)")
        await finalize_profile_creation(message, state, db)

@router.message(ProfileStates.waiting_for_photo)
async def process_invalid_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ–æ—Ç–æ"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
        reply_markup=get_photo_add_keyboard()
    )

@router.callback_query(F.data == "add_more_photo", ProfileStates.waiting_for_photo)
async def continue_adding_photos(callback: CallbackQuery):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await callback.answer()
    await callback.message.edit_text(
        "üì∏ <b>–î–æ–±–∞–≤—å –µ—â–µ —Ñ–æ—Ç–æ</b>\n\n"
        "–ü—Ä–∏—à–ª–∏ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã.",
        parse_mode="HTML",
        reply_markup=get_photo_add_keyboard()
    )

@router.callback_query(F.data == "finish_profile", ProfileStates.waiting_for_photo)
async def finish_profile_creation(callback: CallbackQuery, state: FSMContext, db: Database):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    await callback.answer()
    logger.info(f"Finish profile button clicked by user {callback.from_user.id}")
    await finalize_profile_creation(callback.message, state, db)
