from aiogram import Router, F
from aiogram.types import CallbackQuery
from database import Database
from handlers.profile import show_user_profile
from utils.keyboards import get_swipe_keyboard, get_main_menu_keyboard
from utils.ai_helper import ai_helper
import logging

logger = logging.getLogger(__name__)

router = Router()

@router.callback_query(F.data == "start_swiping")
async def start_swiping(callback: CallbackQuery, db: Database):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞
    user = await db.get_user(user_id)
    if not user or not user.name or not user.age or not user.gender:
        await callback.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É!",
            reply_markup=get_main_menu_keyboard(has_profile=False)
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db.update_last_active(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await show_next_profile(callback.message, db, user_id)

async def show_next_profile(message, db: Database, user_id: int, exclude_user_id: int = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è —Å–≤–∞–π–ø–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    current_user = await db.get_user(user_id)
    logger.info(f"User {user_id} searching for profiles: gender={current_user.gender}, looking_for={current_user.looking_for}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    potential_matches = await db.get_users_for_swipe(user_id, limit=10, exclude_user_id=exclude_user_id)
    logger.info(f"Found {len(potential_matches)} potential matches for user {user_id}")
    
    if not potential_matches:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        all_users = await db.get_all_users_debug()
        logger.info(f"Total users in database: {len(all_users)}")
        for user in all_users:
            logger.info(f"User {user.user_id}: gender={user.gender}, age={user.age}, active={user.is_active}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(
            "üòî <b>–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!</b>\n\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –ó–∞—Ö–æ–¥–∏ –ø–æ–∑–∂–µ - –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä—å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard(has_profile=True)
        )
        return
    
    candidate = potential_matches[0]
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∞–Ω–∫–µ—Ç—ã
    await db.create_or_update_user(
        candidate.user_id,
        profile_views=candidate.profile_views + 1
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∫–µ—Ç—É
    await show_user_profile(message, db, candidate.user_id, is_own=False, edit_message=True, for_swipe=True)

@router.callback_query(F.data.regexp(r"^like_\d+$"))
async def process_like(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞"""
    await callback.answer("‚ù§Ô∏è")
    
    user_id = callback.from_user.id
    target_user_id = int(callback.data.split("_")[1])
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–∞–π–ø –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞—Ç—á
    is_match = await db.create_swipe(user_id, target_user_id, is_like=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∞—Ç—á)
    if not is_match:
        try:
            from aiogram import Bot
            from config import Config
            bot = Bot(token=Config.BOT_TOKEN)
            await db.send_like_notification(target_user_id, bot)
        except Exception as e:
            logger.error(f"Failed to send like notification: {e}")
    
    if is_match:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–µ—Ä–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        user = await db.get_user(user_id)
        target_user = await db.get_user(target_user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏
        target_user_link = f"tg://user?id={target_user_id}"
        current_user_link = f"tg://user?id={user_id}"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –º–∞—Ç—á–µ
        match_text = (
            f"üî• <b>–≠–¢–û –ú–ê–¢–ß!</b> üî•\n\n"
            f"–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É —Å <a href='{target_user_link}'>{target_user.name}</a>!\n\n"
            f"üí¨ <b>–î–ª—è –æ–±—â–µ–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –∏–º—è {target_user.name} –≤—ã—à–µ\n"
            f"‚Ä¢ –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—é: <a href='{target_user_link}'>@{target_user.name}</a>"
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å AI
        if user and target_user:
            user_data = {
                'name': user.name,
                'age': user.age,
                'city': user.city,
                'bio': user.bio
            }
            target_data = {
                'name': target_user.name,
                'age': target_user.age,
                'city': target_user.city,
                'bio': target_user.bio
            }
            
            conversation_starter = await ai_helper.generate_conversation_starter(user_data, target_data)
            if conversation_starter:
                match_text += f"\n\nüí° <b>–ò–¥–µ—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:</b>\n<i>{conversation_starter}</i>"
        
        # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            match_text_for_target = (
                f"üî• <b>–≠–¢–û –ú–ê–¢–ß!</b> üî•\n\n"
                f"–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É —Å <a href='{current_user_link}'>{user.name}</a>!\n\n"
                f"üí¨ <b>–î–ª—è –æ–±—â–µ–Ω–∏—è:</b>\n"
                f"‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –∏–º—è {user.name} –≤—ã—à–µ\n"
                f"‚Ä¢ –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—é: <a href='{current_user_link}'>@{user.name}</a>"
            )
            
            if conversation_starter:
                match_text_for_target += f"\n\nüí° <b>–ò–¥–µ—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:</b>\n<i>{conversation_starter}</i>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            from aiogram import Bot
            from config import Config
            bot = Bot(token=Config.BOT_TOKEN)
            await bot.send_message(
                chat_id=target_user_id,
                text=match_text_for_target,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"Failed to send match notification to user {target_user_id}: {e}")
        
        from utils.keyboards import get_back_to_menu_keyboard
        await callback.message.edit_text(
            match_text,
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard(),
            disable_web_page_preview=True
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        await show_next_profile(callback.message, db, user_id)

@router.callback_query(F.data.regexp(r"^dislike_\d+$"))
async def process_dislike(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞"""
    await callback.answer("üëé")
    
    user_id = callback.from_user.id
    target_user_id = int(callback.data.split("_")[1])
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–∞–π–ø
    await db.create_swipe(user_id, target_user_id, is_like=False)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    await show_next_profile(callback.message, db, user_id)

@router.callback_query(F.data == "next_profile")
async def show_next_profile_callback(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∫ –¥–∏—Å–ª–∞–π–∫)"""
    await callback.answer("‚è≠Ô∏è")
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
    # –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º
    await show_next_profile(callback.message, db, user_id)

@router.callback_query(F.data.startswith("report_"))
async def report_user(callback: CallbackQuery, db: Database):
    """–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    
    target_user_id = int(callback.data.split("_")[1])
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∂–∞–ª–æ–±
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        "üìä <b>–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n\n"
        "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard(has_profile=True)
    )
    
    logger.info(f"User {callback.from_user.id} reported user {target_user_id}")

def register_swipe_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–≤–∞–π–ø–æ–≤"""
    dp.include_router(router)
