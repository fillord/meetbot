from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Contact
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import Database
from utils.keyboards import get_verification_keyboard, get_back_to_menu_keyboard
import random
import asyncio
import logging

logger = logging.getLogger(__name__)
router = Router()

class VerificationStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
verification_codes = {}

@router.callback_query(F.data == "verify_phone")
async def start_phone_verification(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await callback.answer()
    
    user_id = callback.from_user.id
    user = await callback.message.bot.get_me()
    
    verification_text = (
        "üì± <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
        "–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –¥–æ–≤–µ—Ä–∏—è –∫ —Ç–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é "
        "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
        "üîí <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ë–µ–π–¥–∂ \"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\" –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n"
        "‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–µ–π–∫–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º:"
    )
    
    await callback.message.edit_text(
        verification_text,
        parse_mode="HTML",
        reply_markup=get_verification_keyboard()
    )
    await state.set_state(VerificationStates.waiting_for_phone)

@router.message(VerificationStates.waiting_for_phone, F.contact)
async def process_phone_number(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    contact = message.contact
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π –Ω–æ–º–µ—Ä
    if contact.user_id != user_id:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=get_verification_keyboard()
        )
        return
    
    phone_number = contact.phone_number
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä
    existing_user = await db.get_user_by_phone(phone_number)
    if existing_user and existing_user.user_id != user_id:
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.clear()
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verification_code = random.randint(100000, 999999)
    verification_codes[user_id] = {
        'code': verification_code,
        'phone': phone_number,
        'attempts': 0
    }
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"üì© <b>–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
        f"–ö–æ–¥: <code>{verification_code}</code>\n\n"
        f"<i>–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∫–æ–¥ –ø—Ä–∏–¥–µ—Ç –ø–æ SMS –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}</i>\n\n"
        f"–í–≤–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    
    await state.set_state(VerificationStates.waiting_for_code)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    asyncio.create_task(cleanup_verification_code(user_id))

@router.message(VerificationStates.waiting_for_code)
async def process_verification_code(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    entered_code = message.text.strip()
    
    if user_id not in verification_codes:
        await message.answer(
            "‚ùå –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.clear()
        return
    
    verification_data = verification_codes[user_id]
    verification_data['attempts'] += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    if verification_data['attempts'] > 3:
        del verification_codes[user_id]
        await message.answer(
            "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ",
            reply_markup=get_back_to_menu_keyboard()
        )
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if entered_code != str(verification_data['code']):
        remaining_attempts = 3 - verification_data['attempts']
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    phone_number = verification_data['phone']
    await db.verify_user_phone(user_id, phone_number)
    
    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    del verification_codes[user_id]
    await state.clear()
    
    success_text = (
        "‚úÖ <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
        f"üì± –¢–≤–æ–π –Ω–æ–º–µ—Ä {phone_number} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω\n\n"
        "üéâ <b>–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:</b>\n"
        "‚Ä¢ –í –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ—è–≤–∏–ª—Å—è –±–µ–π–¥–∂ \"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\"\n"
        "‚Ä¢ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞–ª –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º\n"
        "‚Ä¢ –ü–æ–≤—ã—Å–∏–ª—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é! üôè"
    )
    
    await message.answer(
        success_text,
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )

@router.message(VerificationStates.waiting_for_phone)
async def invalid_phone_input(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        reply_markup=get_verification_keyboard()
    )

async def cleanup_verification_code(user_id: int):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç"""
    await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
    if user_id in verification_codes:
        del verification_codes[user_id]

def register_verification_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    dp.include_router(router)
