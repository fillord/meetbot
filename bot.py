import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand
from config import Config
from database import Database
from handlers import register_all_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def setup_bot_commands(bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ"),
        BotCommand(command="profile", description="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞"),
        BotCommand(command="search", description="üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"),
        BotCommand(command="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
    ]
    
    await bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

async def on_startup(bot: Bot, db: Database):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await db.init_db()
    await setup_bot_commands(bot)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not Config.BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=Config.BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database(Config.DATABASE_URL)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ db –≤ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    from aiogram import BaseMiddleware
    from typing import Callable, Dict, Any, Awaitable
    from aiogram.types import TelegramObject
    
    class DatabaseMiddleware(BaseMiddleware):
        def __init__(self, db: Database):
            self.db = db
        
        async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
        ) -> Any:
            data['db'] = self.db
            return await handler(event, data)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    db_middleware = DatabaseMiddleware(db)
    dp.message.middleware(db_middleware)
    dp.callback_query.middleware(db_middleware)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_all_handlers(dp)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    from aiogram import Router
    from aiogram.types import Message
    from aiogram.filters import Command
    from utils.keyboards import get_main_menu_keyboard
    
    commands_router = Router()
    
    @commands_router.message(Command("profile"))
    async def profile_command(message: Message, db: Database):
        """–ö–æ–º–∞–Ω–¥–∞ /profile"""
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        
        if user and user.name and user.age and user.gender:
            from handlers.profile import show_user_profile
            await show_user_profile(message, db, user_id, is_own=True)
        else:
            await message.answer(
                "‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã!\n\n–°–æ–∑–¥–∞–π –µ–µ —Å –ø–æ–º–æ—â—å—é /start",
                reply_markup=get_main_menu_keyboard(has_profile=False)
            )
    
    @commands_router.message(Command("search"))
    async def search_command(message: Message, db: Database):
        """–ö–æ–º–∞–Ω–¥–∞ /search"""
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        
        if user and user.name and user.age and user.gender:
            from handlers.swipe import show_next_profile
            await message.answer("üîç –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π –¥–ª—è —Ç–µ–±—è...")
            await show_next_profile(message, db, user_id)
        else:
            await message.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é /start",
                reply_markup=get_main_menu_keyboard(has_profile=False)
            )
    
    @commands_router.message(Command("settings"))
    async def settings_command(message: Message, db: Database):
        """–ö–æ–º–∞–Ω–¥–∞ /settings"""
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        
        if not user or not user.name:
            await message.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é /start",
                reply_markup=get_main_menu_keyboard(has_profile=False)
            )
            return
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "–ù–∞—Å—Ç—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –ø–æ–¥ —Å–µ–±—è:\n\n"
            "üéØ <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b> - –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç\n"
            "üìç <b>–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞</b> - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π\n"
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - —É–ø—Ä–∞–≤–ª—è–π –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
        )
        
        from utils.keyboards import get_settings_keyboard
        await message.answer(
            settings_text,
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
    
    @commands_router.message(Command("help"))
    async def help_command(message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = (
            "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Meet Bot</b>\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ\n"
            "/profile - –ú–æ—è –∞–Ω–∫–µ—Ç–∞\n"
            "/search - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n"
            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "1. –°–æ–∑–¥–∞–π –∞–Ω–∫–µ—Ç—É —Å —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º\n"
            "2. –°–º–æ—Ç—Ä–∏ –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "3. –°—Ç–∞–≤—å –ª–∞–π–∫–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–º—Å—è –ª—é–¥—è–º\n"
            "4. –ü—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–∞—Ç!\n\n"
            "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ üì∏ –î–æ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∞–Ω–∫–µ—Ç–µ\n"
            "‚Ä¢ ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è\n"
            "‚Ä¢ üîç –§–∏–ª—å—Ç—Ä—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é\n"
            "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –ª–∞–π–∫–æ–≤\n\n"
            "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @support_username"
        )
        
        await message.answer(
            help_text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard(has_profile=True)
        )
    
    dp.include_router(commands_router)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await on_startup(bot, db)
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await on_shutdown()
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
